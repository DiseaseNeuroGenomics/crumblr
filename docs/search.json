[{"path":"http://gabrielhoffman.github.io/crumblr/articles/crumblr.html","id":"differential-testing","dir":"Articles","previous_headings":"","what":"Differential testing","title":"Using crumblr in practice","text":"evaluate whether observed cell proportions change response interferon β. Given results , reject null hypothesis interferon β affect cell type proportions.","code":"library(crumblr)  # Load cell counts from Kang, et al. (2018) #  https://doi.org/10.1038/nbt.4042 data(IFNCellCounts)  # Apply crumblr transformation  # cobj is an EList object compatable with limma workflow # cobj$E stores transformed values  # cobj$weights stores precision weights cobj = crumblr(cellCounts)  # Use limma workflow to analyze each cell # Perform regression on each cell type separately #  then use eBayes to shrink residual variance # Also compatible with variancePartition::dream() for linear mixed models library(limma) design = model.matrix( ~ StimStatus + ind, info) fit = lmFit(cobj, design) fit = eBayes(fit)  # Extract results for each cell type topTable(fit, coef=\"StimStatusstim\", number=Inf, sort.by=\"none\") ##                         logFC    AveExpr          t   P.Value adj.P.Val         B ## B cells           -0.09825871  0.5516882 -0.6779201 0.5076669  0.823424 -4.746255 ## CD14+ Monocytes   -0.12437220  1.2698117 -0.9560159 0.3535191  0.823424 -4.685558 ## CD4 T cells       -0.07763160  2.0201947 -0.4732415 0.6425378  0.823424 -4.900413 ## CD8 T cells       -0.16431725  0.0857175 -0.3892080 0.7023377  0.823424 -4.758201 ## Dendritic cells    0.32516900 -2.1849234  1.0895217 0.2923251  0.823424 -4.590653 ## FCGR3A+ Monocytes  0.06580754 -0.2567492  0.3460969 0.7338531  0.823424 -4.734622 ## Megakaryocytes     0.04681137 -1.8655172  0.2268978 0.8234240  0.823424 -4.635391 ## NK cells           0.08494553  0.3797777  0.5814645 0.5691622  0.823424 -4.753355"},{"path":"http://gabrielhoffman.github.io/crumblr/articles/crumblr.html","id":"pca","dir":"Articles","previous_headings":"","what":"PCA","title":"Using crumblr in practice","text":"Performing PCA transformed cell counts indicates samples cluster based subject rather stimulation status.","code":"library(ggplot2)  # Apply variance stabilizing transform M_vst = vst(cobj)  # Perform PCA pca = prcomp(t(M_vst))  # merge with metadata  df_pca = merge(pca$x, info, by=\"row.names\")  # Plot PCA  #   color by Subject #   shape by Stimulated vs unstimulated ggplot(df_pca, aes(PC1, PC2, color=as.character(ind),  shape=StimStatus)) +          geom_point(size=3) +          theme_classic() +          theme(aspect.ratio=1) +          scale_color_discrete(name=\"Subject\") +         xlab(\"PC1\") + ylab(\"PC2\")"},{"path":"http://gabrielhoffman.github.io/crumblr/articles/crumblr.html","id":"hierachical-clustering","dir":"Articles","previous_headings":"","what":"Hierachical clustering","title":"Using crumblr in practice","text":"samples subject also cluster together.","code":"heatmap(M_vst)"},{"path":"http://gabrielhoffman.github.io/crumblr/articles/crumblr.html","id":"variance-partitioning","dir":"Articles","previous_headings":"","what":"Variance partitioning","title":"Using crumblr in practice","text":"Decomposing variance illustrates variation explained subject stimulation status.","code":"library(variancePartition)  # Partition variance into components for Subject (i.e. ind) #   and stimulation status, and residual variation vp = fitExtractVarPartModel( cobj, ~ ind + StimStatus, info)  # Plot variance fractions plotPercentBars(vp)"},{"path":"http://gabrielhoffman.github.io/crumblr/articles/crumblr_theory.html","id":"crumblr-is-an-important-special-case","dir":"Articles","previous_headings":"","what":"crumblr is an important special case","title":"crumblr: compare emprical and asymptotic theory","text":"Based Equation (2), variance CLR-transformed proportions linear function \\(\\tau\\). Importantly, downstream analysis CLR-transformed proportions precision-weighted linear (mixed) model variance stabilizing transform depends relative variances. Since relative variances invariant scale \\(\\tau\\), applications value \\(\\tau\\) can set 1 instead estimated data. applications, crumblr can estimate \\(\\tau\\) data using crumblr(counts, tau=NULL). calls dmn.mle() estimate parameters DMN distribution substantially faster alternatives.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/articles/crumblr_theory.html","id":"d2-categories","dir":"Articles","previous_headings":"","what":"D=2 categories","title":"crumblr: compare emprical and asymptotic theory","text":"True vector fractions \\(\\bf p\\) (0.0033, 0.996).","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/articles/crumblr_theory.html","id":"d25-categories","dir":"Articles","previous_headings":"","what":"D=25 categories","title":"crumblr: compare emprical and asymptotic theory","text":"True vector fractions \\(\\bf p\\) (0.0033, 0.2300, 0.0333,…) remaining elements also 0.0333.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/articles/vst.html","id":"examine-vst","dir":"Articles","previous_headings":"","what":"Examine VST","title":"Variance stabilizing transform","text":"First, simulate count data:","code":"library(crumblr) library(cowplot)  set.seed(1)  # set probability of each category x = rgamma(300, 1, 10) prob = x / sum(x)  # number of samples n_samples = 500  # number of counts nCounts = 3000  # simulate counts from multinomial counts = t(rmultinom(n_samples, size = nCounts, prob = prob)) colnames(counts) = paste0(\"cat_\", 1:length(prob)) rownames(counts) = paste0(\"sample_\", 1:n_samples)  # keep categories with at least 5 counts in at least 10 samples keep = colSums(counts > 5) > 20  # compute fractions from counts # using pseudocount of 0.5 fractions = apply(counts[,keep], 1, function(x){   x = x + 0.5   x / sum(x) })  # run crumblr on counts cobj = crumblr(counts[,keep], tau=1)"},{"path":"http://gabrielhoffman.github.io/crumblr/articles/vst.html","id":"apply-vst","dir":"Articles","previous_headings":"","what":"Apply vst","title":"Variance stabilizing transform","text":"crumblr performs centered log-ratio (CLR) transform, computes observation-level precision weights. VST scales transformed values using precision weights. see vst() almost linear sufficiently large CLR values.","code":"df_vst = vst(cobj)  plotScatterDensity(cobj$E[,1], df_vst[,1]) +          geom_abline(color=\"red\", size=.3) +          ggtitle(\"crumblr + vst transform\") +         xlab(\"CLR\") +         ylab(\"crumblr + vst\")"},{"path":"http://gabrielhoffman.github.io/crumblr/articles/vst.html","id":"concordance-between-samples-for-each-transform","dir":"Articles","previous_headings":"","what":"Concordance between samples for each transform","title":"Variance stabilizing transform","text":"Concordance two identically distributed samples show using () fractions, (B) CLR (C) VST proposed . low counts, CLR (B) highly discordant two samples due imprecise measurement. (C) VST -weights measurements improve concordance.","code":"fig1 = plotScatterDensity(fractions[,1], fractions[,2]) +              geom_abline(color=\"red\", size=.3) +              ggtitle(\"Fractions\") +             xlab(\"Sample 1\") +             ylab(\"Sample 2\")   fig2 = plotScatterDensity(cobj$E[,1], cobj$E[,2]) +              geom_abline(color=\"red\", size=.3) +              ggtitle(\"CLR\") +             xlab(\"Sample 1\") +             ylab(\"Sample 2\")  fig3 = plotScatterDensity(df_vst[,1], df_vst[,2]) +              geom_abline(color=\"red\", size=.3) +              ggtitle(\"crumblr + vst\")  +             xlab(\"Sample 1\") +             ylab(\"Sample 2\")   plot_grid(fig1, fig2, fig3, labels=LETTERS[1:3], nrow=1)"},{"path":"http://gabrielhoffman.github.io/crumblr/articles/vst.html","id":"measuring-variance-stabilization","dir":"Articles","previous_headings":"","what":"Measuring variance stabilization","title":"Variance stabilizing transform","text":"variance stabilizing property can observed empirically. feature (.e. gene, cell type, etc), standard deviation transformed value compared rank mean. variance stabilized coefficient variation (.e. sd/mean) smaller. CLR-transform provide variance stabilization compared using fractions, VST produces much stronger stabilization.","code":"# Mean vs SD plot  fig1 = meanSdPlot(fractions) + ggtitle(\"Fractions\")  fig2 = meanSdPlot(cobj$E) + ggtitle(\"CLR\")  fig3 = meanSdPlot(df_vst) + ggtitle(\"crumblr vst\")  plot_grid(fig1, fig2, fig3, labels=LETTERS[1:3], nrow=1)"},{"path":"http://gabrielhoffman.github.io/crumblr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman G (2022). crumblr: Count ratio uncertainty modeling base linear regression. R package version 1.0.7, https://gabrielhoffman.github.io/crumblr.","code":"@Manual{,   title = {crumblr: Count ratio uncertainty modeling base linear regression},   author = {Gabriel Hoffman},   year = {2022},   note = {R package version 1.0.7},   url = {https://gabrielhoffman.github.io/crumblr}, }"},{"path":"http://gabrielhoffman.github.io/crumblr/index.html","id":"count-ratio-uncertainty-modeling-based-linear-regression-","dir":"","previous_headings":"","what":"Count ratio uncertainty modeling based linear regression","title":"Count ratio uncertainty modeling base linear regression","text":"crumblr package enables analysis count ratio data using precision-weighted linear (mixed) models, PCA clustering. crumblr’s fast, normal approximation transformed count data Dirichlet-multinomial model allows use standard workflows analyize count ratio data modeling heteroskedasticity.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Count ratio uncertainty modeling base linear regression","text":"Analysis count ratio data (.e. fractions) requires special consideration since data non-normal, heteroskedastic, spans low rank space. counts can considered directly using Poisson, negative binomial, Dirichlet-multinomial models simple regression applications, can problematic since 1) can computationally expensive, 2) can produce poorly calibrated hypothesis tests, 3) challenging extend applications. widely used centered log-ratio (CLR) transform compositional data analysis makes count ratio data normal enables use linear models, standard methods. Yet CLR-transformed data still highly heteroskedastic: precision measurements varies widely. important factor considered existing methods. crumblr uses fast asymptotic normal approximation CLR-transformed counts Dirichlet-multinomial distribution model sampling variance transformed counts. crumblr enables incorporating sampling variance precision weights linear (mixed) models order increase power control false positive rate. crumblr also uses variance stabilizing transform (vst) based precision weights improve performance PCA clustering.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Count ratio uncertainty modeling base linear regression","text":"","code":"# repo is currently private, so need to include your userid and password devtools::install_github(\"GabrielHoffman/crumblr\", auth_token=XXXXX)"},{"path":"http://gabrielhoffman.github.io/crumblr/index.html","id":"introduction-to-compositional-data-analysis","dir":"","previous_headings":"","what":"Introduction to compositional data analysis","title":"Count ratio uncertainty modeling base linear regression","text":"Brief intro bioinformatics Quinn, et al. 2018 Book analysis R van den Boogaart Tolosana-Delgado, 2013","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/IFNCellCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell counts following interferon treatment — IFNCellCounts","title":"Cell counts following interferon treatment — IFNCellCounts","text":"Counts single cell RNA-seq data treated untreated samples (Kang et al. 2018) .","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/IFNCellCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell counts following interferon treatment — IFNCellCounts","text":"","code":"data(IFNCellCounts)  info  cellCounts"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/IFNCellCounts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cell counts following interferon treatment — IFNCellCounts","text":"info metadata sample cellCounts data.frame counts sample object class data.frame 16 rows 4 columns. object class matrix (inherits array) 16 rows 8 columns.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/IFNCellCounts.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cell counts following interferon treatment — IFNCellCounts","text":"Kang HM, Subramaniam M, Targ S, Nguyen M, Maliskova L, McCarthy E, Wan E, Wong S, Byrnes L, Lanata CM, others (2018). “Multiplexed droplet single-cell RNA-sequencing using natural genetic variation.” Nature Biotechnology, 36(1), 89--94.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/clr.html","id":null,"dir":"Reference","previous_headings":"","what":"Centered log ratio transform — clr","title":"Centered log ratio transform — clr","text":"Compute centered log ratio (CLR) transform count matrix.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/clr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centered log ratio transform — clr","text":"","code":"clr(counts, pseudocount = 0.5)"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/clr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centered log ratio transform — clr","text":"counts count data samples rows variables columns pseudocount added counts avoid issues zeros","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/clr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centered log ratio transform — clr","text":"matrix CLR transformed counts","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/clr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Centered log ratio transform — clr","text":"CLR vector x counts D categories defined  clr(x) = log(x) - mean(log(x)). details see van den Boogaart  Tolosana-Delgado (2013).","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/clr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Centered log ratio transform — clr","text":"Van den Boogaart KG, Tolosana-Delgado R (2013). Analyzing compositional data R, volume 122. Springer. https://link.springer.com/book/10.1007/978-3-642-36809-7.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/crumblr/reference/clr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centered log ratio transform — clr","text":"","code":"# set probability of each category prob = c(0.1, 0.2, 0.3, 0.5)  # number of total counts countsTotal = 300  # number of samples n_samples = 100  # simulate info for each sample info = data.frame(Age = rgamma(n_samples, 50, 1)) rownames(info) = paste0(\"sample_\", 1:n_samples)  # simulate counts from multinomial counts = t(rmultinom(n_samples, size = n_samples, prob = prob)) colnames(counts) = paste0(\"cat_\", 1:length(prob)) rownames(counts) = paste0(\"sample_\", 1:n_samples)  # centered log ratio clr(counts) #>                 cat_1         cat_2        cat_3     cat_4 #> sample_1   -1.2809675 -1.530114e-02  0.464271938 0.8319967 #> sample_2   -1.2936636  1.585887e-01  0.315774294 0.8193006 #> sample_3   -1.0306880  2.246191e-02  0.193087422 0.8151387 #> sample_4   -1.1004989 -1.101002e-01  0.184699376 1.0258997 #> sample_5   -0.9801961 -3.924095e-01  0.486140941 0.8864646 #> sample_6   -1.0096061 -2.836691e-01  0.545023527 0.7482518 #> sample_7   -0.7628189 -5.717636e-01  0.467129409 0.8674531 #> sample_8   -0.8607511  4.495751e-02  0.202143092 0.6136505 #> sample_9   -0.6125788 -2.761066e-01  0.402651878 0.4860335 #> sample_10  -0.9407658 -1.104175e-01  0.430713428 0.6204700 #> sample_11  -1.3142320  2.581647e-01  0.398746638 0.6573206 #> sample_12  -0.8955643 -1.734296e-01  0.163042625 0.9059513 #> sample_13  -0.6357143 -4.039127e-01  0.236124633 0.8035024 #> sample_14  -0.9774852 -3.896985e-01  0.457599315 0.9095844 #> sample_15  -1.1218111 -1.902529e-01  0.424113424 0.8879505 #> sample_16  -0.6562751 -5.653033e-01  0.231028091 0.9905503 #> sample_17  -0.9580956  1.535359e-02  0.471370980 0.4713710 #> sample_18  -1.4693878  3.764389e-01  0.340720776 0.7522282 #> sample_19  -1.2948215  1.991036e-01  0.277575166 0.8181428 #> sample_20  -0.9220226 -9.167430e-02  0.215055965 0.7986409 #> sample_21  -1.2798783  1.288889e-01  0.254052039 0.8969374 #> sample_22  -1.0287655 -7.325401e-02  0.306235616 0.7957838 #> sample_23  -0.7597384 -1.406992e-01  0.238790400 0.6616473 #> sample_24  -1.1685749  2.767586e-02  0.556935184 0.5839639 #> sample_25  -0.6174719 -1.227757e-01  0.133944148 0.6063035 #> sample_26  -0.5271130 -3.889626e-01  0.320184875 0.5958908 #> sample_27  -0.6755976 -2.557438e-01  0.299782015 0.6315594 #> sample_28  -0.9216047  6.382106e-03  0.095329592 0.8198930 #> sample_29  -0.6924154 -1.643480e-01  0.315225116 0.5415382 #> sample_30  -0.2276720 -6.197141e-01  0.395516584 0.4518695 #> sample_31  -0.9732512 -2.473142e-01  0.210518902 1.0100465 #> sample_32  -0.6612466 -4.868932e-01  0.144378585 1.0037612 #> sample_33  -0.8929752 -1.152706e-01  0.080473966 0.9277718 #> sample_34  -0.7761455 -4.247476e-01  0.286748681 0.9141445 #> sample_35  -1.2977619  6.554296e-02  0.509035465 0.7231835 #> sample_36  -0.8210344 -1.545555e-01  0.166352257 0.8092376 #> sample_37  -0.7466184 -2.946332e-01  0.413551813 0.6276998 #> sample_38  -0.5157275  4.880232e-02  0.087268600 0.3796566 #> sample_39  -1.1207384 -1.303397e-01  0.321645405 0.9294327 #> sample_40  -0.9176146  1.809977e-01 -0.087266254 0.8238831 #> sample_41  -0.9330312 -5.267246e-02  0.241088660 0.7446150 #> sample_42  -1.2792036  3.647319e-02  0.365952393 0.8767780 #> sample_43  -0.6229518 -4.626092e-01  0.248887156 0.8366738 #> sample_44  -0.9356779 -7.691104e-03  0.201400694 0.7419683 #> sample_45  -0.5533879 -1.856631e-01  0.193826534 0.5452244 #> sample_46  -1.1449835  3.639191e-03  0.297400310 0.8439440 #> sample_47  -0.6936642 -2.249591e-02  0.102667234 0.6134929 #> sample_48  -0.5974203  3.385146e-02 -0.152734495 0.7163034 #> sample_49  -0.9848288 -8.196112e-02  0.068321088 0.9984689 #> sample_50  -0.8289868 -1.098641e-01  0.158399845 0.7804511 #> sample_51  -1.3768774 -3.552261e-01  0.795345912 0.9367576 #> sample_52  -1.0084126 -1.611148e-01  0.290870361 0.8786570 #> sample_53  -0.7597333 -9.068363e-02  0.166036217 0.6843807 #> sample_54  -1.4507595  2.438362e-01  0.322307843 0.8846154 #> sample_55  -0.7723812 -5.570349e-02  0.226147661 0.6019370 #> sample_56  -0.6328541 -2.718408e-01  0.038314176 0.8663807 #> sample_57  -1.0438019 -3.828000e-02  0.391282664 0.6907992 #> sample_58  -1.1139610 -3.116145e-01  0.638577759 0.7869978 #> sample_59  -0.6427375 -4.109359e-01  0.299305698 0.7543677 #> sample_60  -0.8799610 -2.166668e-01  0.136973266 0.9596545 #> sample_61  -1.1004989 -1.101002e-01  0.184699376 1.0258997 #> sample_62  -0.9052799 -1.831452e-01  0.231798621 0.8566266 #> sample_63  -0.7358833 -5.448280e-01  0.251503375 1.0292079 #> sample_64  -0.9292504 -2.071157e-01  0.581341687 0.5550244 #> sample_65  -1.1253706 -7.940201e-02  0.279971988 0.9248006 #> sample_66  -0.4251215 -4.965805e-01  0.139408306 0.7822937 #> sample_67  -1.2635920  1.451752e-01  0.145175180 0.9732417 #> sample_68  -0.5015121  6.301768e-02 -0.062145461 0.5006399 #> sample_69  -0.7330477 -3.435830e-01  0.365564542 0.7110662 #> sample_70  -0.5789065 -1.342207e-01 -0.084210280 0.7973375 #> sample_71  -0.8241940  1.231873e-01 -0.105071329 0.8060780 #> sample_72  -0.6777102 -2.578563e-01  0.329930323 0.6056362 #> sample_73  -0.6790018 -1.509344e-01  0.155795877 0.6741403 #> sample_74  -0.8966489 -2.958750e-01  0.347675201 0.8448487 #> sample_75  -1.3041328  1.046345e-01  0.532078475 0.6674198 #> sample_76  -0.5751257 -2.386535e-01  0.012660933 0.8011183 #> sample_77  -0.7288123 -4.060389e-01  0.489345189 0.6455059 #> sample_78  -0.6611358 -3.626428e-01  0.377757283 0.6460213 #> sample_79  -0.6761292 -1.653035e-01 -0.165303533 1.0067362 #> sample_80  -1.2671623 -1.097095e-01  0.509329746 0.8675420 #> sample_81  -0.9147999 -3.444115e-02  0.102134386 0.8471066 #> sample_82  -0.7776489  2.208799e-01 -0.015508848 0.5722778 #> sample_83  -1.1482069 -1.022383e-01  0.520950247 0.7294950 #> sample_84  -0.8210344  1.663523e-01 -0.154555463 0.8092376 #> sample_85  -0.4613941 -4.613941e-01  0.433989964 0.4887982 #> sample_86  -1.2488699 -1.502576e-01  0.430772245 0.9683553 #> sample_87  -0.3341754 -4.633871e-01  0.139608995 0.6579535 #> sample_88  -0.8583015 -4.154041e-02  0.308133336 0.5917086 #> sample_89  -0.4756451 -8.613075e-01  0.416352977 0.9205996 #> sample_90  -0.8460216 -1.795426e-01  0.553344874 0.4722193 #> sample_91  -0.3862720 -7.090454e-01  0.253765359 0.8415520 #> sample_92  -1.2695612  1.392060e-01  0.182691131 0.9476640 #> sample_93  -0.8931296 -2.923557e-01  0.316708351 0.8687769 #> sample_94  -0.7963157 -4.449178e-01  0.493351825 0.7478817 #> sample_95  -1.2882273  1.205399e-01  0.321210575 0.8464769 #> sample_96  -0.9314963  1.671160e-01 -0.003509531 0.7678898 #> sample_97  -0.9349584 -1.572538e-01  0.465934776 0.6262774 #> sample_98  -1.1793248  1.875515e-01  0.366599687 0.6251737 #> sample_99  -1.0211035 -6.559204e-02  0.241138229 0.8455573 #> sample_100 -1.1485937  2.902042e-05  0.329508222 0.8190564"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/crumblr.html","id":null,"dir":"Reference","previous_headings":"","what":"Count ratio uncertainty modeling based linear regression — crumblr","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"Count ratio uncertainty modeling based linear regression (crumblr) returns CLR-transformed counts observation-level inverse-variance weights use weighted linear models.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/crumblr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"","code":"crumblr(counts, pseudocount = 0.5, tau = 1)  # S4 method for matrix crumblr(counts, pseudocount = 0.5, tau = 1)  # S4 method for data.frame crumblr(counts, pseudocount = 0.5, tau = 1)"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/crumblr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"counts count data samples rows variables columns pseudocount added counts avoid issues zeros tau overdispersion parameter Dirichlet multinomial.  NULL, estimate observed counts.","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/crumblr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"EList object following components: E: numeric matrix CLR transformed counts weights: numeric matrix observation-level inverse-variance weights","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/crumblr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"Evalute centered log ratio (CLR) transform count matrix, asymptotic theoretical variances transformed observation.  asymptotic normal approximation increasingly accurate small overdispersion \\(\\tau\\), large total counts \\(C\\), large proportions \\(p\\), shows good agreement empirical results situtations. practice, often reasonable assume sufficient number counts variable included analysis anyway.  feasability assumption user determine.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/crumblr/reference/crumblr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"","code":"# set probability of each category prob = c(0.1, 0.2, 0.3, 0.5)  # number of total counts countsTotal = 300  # number of samples n_samples = 100  # simulate info for each sample info = data.frame(Age = rgamma(n_samples, 50, 1)) rownames(info) = paste0(\"sample_\", 1:n_samples)  # simulate counts from multinomial counts = t(rmultinom(n_samples, size = countsTotal, prob = prob)) colnames(counts) = paste0(\"cat_\", 1:length(prob)) rownames(counts) = paste0(\"sample_\", 1:n_samples)  # run crumblr on counts cobj = crumblr(counts)  # run standard limma analysis on crumblr results library(limma)  design = model.matrix(~Age, info) fit = lmFit(cobj, design) fit = eBayes(fit)  topTable(fit, coef=\"Age\", sort.by=\"none\") #>               logFC    AveExpr           t   P.Value adj.P.Val         B #> cat_1 -5.388791e-04 -0.8550333 -0.22199545 0.8244330 0.9767197 -8.289124 #> cat_2 -7.901080e-04 -0.1556286 -0.41437667 0.6788249 0.9767197 -8.469255 #> cat_3  1.465140e-03  0.2403442  0.87195812 0.3837650 0.9767197 -8.301418 #> cat_4 -4.305361e-05  0.7703177 -0.02920028 0.9767197 0.9767197 -8.811705"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/dmn.mle.html","id":null,"dir":"Reference","previous_headings":"","what":"MLE for Dirichlet Multinomial — dmn.mle","title":"MLE for Dirichlet Multinomial — dmn.mle","text":"MLE Dirichlet Multinomial","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/dmn.mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MLE for Dirichlet Multinomial — dmn.mle","text":"","code":"dmn.mle(counts, ...)"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/dmn.mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MLE for Dirichlet Multinomial — dmn.mle","text":"counts matrix rows samples columns categories ... additional arguments passed optim()","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/dmn.mle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MLE for Dirichlet Multinomial — dmn.mle","text":"list storing alpha parameter estimates, logLik, details convergence alphaestimated \\(alpha\\) parameters overdispersionOverdispersion value \\(1 + \\rho^2(n-1)\\) compared multinomial logLikvalue function scalescaling \\(\\alpha\\) parameters computed second optimization step evalsnumber function evaluations step 1 convergenceconvergence details step 1","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/dmn.mle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MLE for Dirichlet Multinomial — dmn.mle","text":"Maximize Dirichlet Multinomial (DMN) log-likelihood optim() using log likelihood function gradient.  method sses second round optimization estimate scale \\(\\alpha\\) parameters, necessary accurate estimation overdispersion metric. covariance counts category DMN distributed data \\(n(diag(p) - pp^T) (1 + \\rho^2(n-1))\\) \\(n\\) total counts, vector proportions  \\(p\\), \\(\\rho^2 = 1 / (a_0 + 1)\\) \\(a_0 = \\sum_i \\alpha_i\\).  count data overdispersed factor \\(1 + \\rho^2(n-1)\\) compared multinomial (MN) distribution.  \\(a_0\\) increases, DMN converges MN. See https://en.wikipedia.org/wiki/Dirichlet-multinomial_distribution#Matrix_notation","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/crumblr/reference/dmn.mle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MLE for Dirichlet Multinomial — dmn.mle","text":"","code":"library(HMP) #> Loading required package: dirmult #>  #> Attaching package: ‘HMP’ #> The following object is masked from ‘package:dirmult’: #>  #>     weirMoM  set.seed(1)  n_samples = 1000 n_counts = 5000 alpha = c(500, 1000, 2000)  # Dirichlet.multinomial counts = Dirichlet.multinomial(rep(n_counts, n_samples), alpha)  fit = dmn.mle(counts)  fit #> $alpha #>    Taxa 1    Taxa 2    Taxa 3  #>  506.3936 1015.2977 2027.6383  #>  #> $overdispersion #> [1] 2.408038 #>  #> $logLik #> [1] -4777957 #>  #> $scale #> [1] 0.7098799 #>  #> $evals #> function gradient  #>        2        2  #>  #> $convergence #> [1] 0 #>   # overdispersion: true value a0 = sum(alpha) rhoSq = 1 / (a0 + 1) 1 + rhoSq*(n_counts-1)  #> [1] 2.427878  # multinomial counts = t(rmultinom(n_samples, n_counts, prob=alpha / sum(alpha)))  dmn.mle(counts) #> $alpha #> [1]  33531.36  66971.13 133977.88 #>  #> $overdispersion #> [1] 1.021319 #>  #> $logLik #> [1] -4779160 #>  #> $scale #> [1] 1.084181 #>  #> $evals #> function gradient  #>       33       33  #>  #> $convergence #> [1] 0 #>"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/meanSdPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot row standard deviations versus row means — meanSdPlot","title":"Plot row standard deviations versus row means — meanSdPlot","text":"Diagnositic plot variance stabilizing transform","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/meanSdPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot row standard deviations versus row means — meanSdPlot","text":"","code":"meanSdPlot(x)"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/meanSdPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot row standard deviations versus row means — meanSdPlot","text":"x data matrix","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/meanSdPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot row standard deviations versus row means — meanSdPlot","text":"plot ggplot2","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/meanSdPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot row standard deviations versus row means — meanSdPlot","text":"Plot sd versus rank mean row like vsn::meanSdPlot.  Also show coefficient variation variances.  lower value indicates stronger variance stabilization","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/crumblr/reference/meanSdPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot row standard deviations versus row means — meanSdPlot","text":"","code":"# set probability of each category prob = runif(300)  # number of samples n_samples = 1000  # number of counts nCounts = 3000  # simulate counts from multinomial counts = t(rmultinom(n_samples, size = nCounts, prob = prob)) colnames(counts) = paste0(\"cat_\", 1:length(prob)) rownames(counts) = paste0(\"sample_\", 1:n_samples)  # keep categories with at least 5 counts in at least 10 samples keep = colSums(counts > 5) > 10  # run crumblr on counts cobj = crumblr(counts[,keep])  # run variance stabilizing transform df_vst = vst(cobj)  # For each sample, plot rank of mean vs sd meanSdPlot(df_vst) + ggtitle(\"crumblr vst\")"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/plotScatterDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot with 2D density using viridis colors — plotScatterDensity","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"Scatter plot 2D density using viridis colors","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/plotScatterDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"","code":"plotScatterDensity(x, y, size = 1)"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/plotScatterDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"x x-coordinates points plot y y-coordinates points plot size size point","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/plotScatterDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"plot ggplot2","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/plotScatterDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"","code":"# simulate data M = Rfast::rmvnorm(1000, mu=c(0,0), sigma=diag(1,2))  # create 2D density plot plotScatterDensity(M[,1], M[,2])"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/vst-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance stabilizing transform from precision weights — vst","title":"Variance stabilizing transform from precision weights — vst","text":"Compute variance stabilizing transform (VST) precision weights scaling observation respective weights","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/vst-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variance stabilizing transform from precision weights — vst","text":"","code":"vst(x)  # S4 method for EList vst(x)"},{"path":"http://gabrielhoffman.github.io/crumblr/reference/vst-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variance stabilizing transform from precision weights — vst","text":"x object storing data transformed","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/vst-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variance stabilizing transform from precision weights — vst","text":"variance stabilizing transform usually described terms parametric model observed data.  Instead, inverse variance observation stored x$weight VST divides observed data scaled standard deviations","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/reference/vst-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance stabilizing transform from precision weights — vst","text":"","code":"# set probability of each category prob = c(0.1, 0.2, 0.3, 0.5)  # number of total counts countsTotal = 300  # number of samples n_samples = 100  # simulate counts from multinomial counts = t(rmultinom(n_samples, size = countsTotal, prob = prob)) colnames(counts) = paste0(\"cat_\", 1:length(prob)) rownames(counts) = paste0(\"sample_\", 1:n_samples)  # run crumblr on counts cobj = crumblr(counts)  # apply variance stabilizing transform (vst) df_vst = vst(cobj)  # Perform PCA on VST transformed data pca = prcomp(t(df_vst)) df_pca = as.data.frame(pca$x)  ggplot(df_pca, aes(PC1, PC2)) + geom_point() + theme_classic() + theme(aspect.ratio=1)"},{"path":"http://gabrielhoffman.github.io/crumblr/news/index.html","id":"crumblr-107","dir":"Changelog","previous_headings":"","what":"crumblr 1.0.7","title":"crumblr 1.0.7","text":"Feb 1, 2022 fix vst() add plots plotScatterDensity() meanSdPlot() VST add vignette vst.Rmd","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/news/index.html","id":"crumblr-106","dir":"Changelog","previous_headings":"","what":"crumblr 1.0.6","title":"crumblr 1.0.6","text":"Jan 31, 2022 add logo, example data","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/news/index.html","id":"crumblr-105","dir":"Changelog","previous_headings":"","what":"crumblr 1.0.5","title":"crumblr 1.0.5","text":"Dec 27, 2021 add dmn.mle() use generic crumblr() function","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/news/index.html","id":"crumblr-104","dir":"Changelog","previous_headings":"","what":"crumblr 1.0.4","title":"crumblr 1.0.4","text":"Dec 23, 2021 Update vignette export clr()","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/news/index.html","id":"crumblr-103","dir":"Changelog","previous_headings":"","what":"crumblr 1.0.3","title":"crumblr 1.0.3","text":"Dec 20, 2021 fix vst bug","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/news/index.html","id":"crumblr-102","dir":"Changelog","previous_headings":"","what":"crumblr 1.0.2","title":"crumblr 1.0.2","text":"Dec 20, 2021 add vst","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/news/index.html","id":"crumblr-101","dir":"Changelog","previous_headings":"","what":"crumblr 1.0.1","title":"crumblr 1.0.1","text":"Oct 29, 2021 handle data.frame","code":""},{"path":"http://gabrielhoffman.github.io/crumblr/news/index.html","id":"crumblr-100","dir":"Changelog","previous_headings":"","what":"crumblr 1.0.0","title":"crumblr 1.0.0","text":"Oct 28, 2021 Initial version","code":""}]
