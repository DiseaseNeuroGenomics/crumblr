[{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using crumblr in practice","text":"Changes cell type composition play important role health disease. Recent advances single cell technology enabled measurement cell type composition increasing cell lineage resolution across large cohorts individuals. Yet raises new challenges statistical analysis compositional data identify changes associated phenotype. introduce crumblr, scalable statistical method analyzing count ratio data using precision-weighted linear models incorporating random effects complex study designs. Uniquely, crumblr performs tests association multiple levels cell lineage hierarchy using multivariate regression increase power tests single cell component. simulations, crumblr increases power compared existing methods, controlling false positive rate. crumblr package integrates variancePartition dreamlet packages Bioconductor ecosystem. consider counts 8 cell types quantified using single cell RNA-seq data unstimulated interferon β stimulated PBMCs 8 subjects (Kang, et al., 2018). functions incorporate precision weights: variancePartition::fitExtractVarPartModel() variancePartition::dream() limma::lmFit()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Using crumblr in practice","text":"install package, start R enter:","code":"# 1) Make sure Bioconductor is installed if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  # 2) Install crumblr and dependencies: # From Bioconductor BiocManager::install(\"crumblr\")"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"process-data","dir":"Articles","previous_headings":"Analysis workflow","what":"Process data","title":"Using crumblr in practice","text":"evaluate whether observed cell proportions change response interferon β. Given results , reject null hypothesis interferon β affect cell type proportions.","code":"library(crumblr)  # Load cell counts, clustering and metadata # from Kang, et al. (2018) https://doi.org/10.1038/nbt.4042 data(IFNCellCounts)  # Apply crumblr transformation # cobj is an EList object compatable with limma workflow # cobj$E stores transformed values # cobj$weights stores precision weights #    corresponding to the regularized inverse variance cobj <- crumblr(df_cellCounts)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"variance-partitioning","dir":"Articles","previous_headings":"Analysis workflow","what":"Variance partitioning","title":"Using crumblr in practice","text":"Decomposing variance illustrates variation explained subject stimulation status.","code":"library(variancePartition)  # Partition variance into components for Subject (i.e. ind) #   and stimulation status, and residual variation form <- ~ (1 | ind) + (1 | StimStatus) vp <- fitExtractVarPartModel(cobj, form, info)  # Plot variance fractions fig.vp <- plotPercentBars(vp) fig.vp"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"pca","dir":"Articles","previous_headings":"Analysis workflow","what":"PCA","title":"Using crumblr in practice","text":"Performing PCA transformed cell counts indicates samples cluster based subject rather stimulation status.","code":"library(ggplot2)  # Perform PCA # use crumblr::standardize() to get values with # approximately equal sampling variance, # which is a key property for downstream PCA and clustering analysis. pca <- prcomp(t(standardize(cobj)))  # merge with metadata df_pca <- merge(pca$x, info, by = \"row.names\")  # Plot PCA #   color by Subject #   shape by Stimulated vs unstimulated ggplot(df_pca, aes(PC1, PC2, color = as.character(ind), shape = StimStatus)) +   geom_point(size = 3) +   theme_classic() +   theme(aspect.ratio = 1) +   scale_color_discrete(name = \"Subject\") +   xlab(\"PC1\") +   ylab(\"PC2\")"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"hierarchical-clustering","dir":"Articles","previous_headings":"Analysis workflow","what":"Hierarchical clustering","title":"Using crumblr in practice","text":"samples subject also cluster together.","code":"heatmap(cobj$E)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"differential-testing","dir":"Articles","previous_headings":"Analysis workflow","what":"Differential testing","title":"Using crumblr in practice","text":"","code":"# Use variancePartition workflow to analyze each cell type # Perform regression on each cell type separately #  then use eBayes to shrink residual variance # Also compatible with limma::lmFit() fit <- dream(cobj, ~ StimStatus + ind, info) fit <- eBayes(fit)  # Extract results for each cell type topTable(fit, coef = \"StimStatusstim\", number = Inf) ##                         logFC    AveExpr          t     P.Value  adj.P.Val         B ## CD8 T cells       -0.25085170  0.0857175 -4.0787416 0.002436375 0.01949100 -1.279815 ## Dendritic cells    0.37386979 -2.1849234  3.1619195 0.010692544 0.02738587 -2.638507 ## CD14+ Monocytes   -0.10525402  1.2698117 -3.1226341 0.011413912 0.02738587 -2.709377 ## B cells           -0.10478652  0.5516882 -3.0134349 0.013692935 0.02738587 -2.940542 ## CD4 T cells       -0.07840101  2.0201947 -2.2318104 0.050869691 0.08139151 -4.128069 ## FCGR3A+ Monocytes  0.07425165 -0.2567492  1.6647681 0.128337022 0.17111603 -4.935304 ## NK cells           0.10270672  0.3797777  1.5181860 0.161321761 0.18436773 -5.247806 ## Megakaryocytes     0.01377768 -1.8655172  0.1555131 0.879651456 0.87965146 -6.198336"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"multivariate-testing-along-a-tree","dir":"Articles","previous_headings":"Analysis workflow > Differential testing","what":"Multivariate testing along a tree","title":"Using crumblr in practice","text":"can gain power jointly testing multiple cell types using multivariate statistical model, instead testing one cell type time. construct hierarchical clustering cell types based gene expression pseudobulk, perform multivariate test internal node tree based leaf nodes. results leaves topTable() . internal node treeTest() performs fixed effects meta-analysis coefficients leaves modeling covariance coefficient estimates. backend, implemented using variancePartition::mvTest() remaCor package. hierarchical clustering, hcl, precomputed pseudobulk gene expression using buildClusterTreeFromPB().","code":"# Perform multivariate test across the hierarchy res <- treeTest(fit, cobj, hcl, coef = \"StimStatusstim\")  # Plot hierarchy and testing results plotTreeTest(res) # Plot hierarchy and regression coefficients plotTreeTestBeta(res)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"combined-plotting","dir":"Articles","previous_headings":"Analysis workflow > Differential testing > Multivariate testing along a tree","what":"Combined plotting","title":"Using crumblr in practice","text":"","code":"plotTreeTestBeta(res) +   theme(legend.position = \"bottom\", legend.box = \"vertical\") |   plotForest(res, hide = FALSE) |   fig.vp"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"hierarchical-clustering-1","dir":"Articles","previous_headings":"Analysis workflow","what":"Hierarchical clustering","title":"Using crumblr in practice","text":"hierarchical clustering used treeTest() can computed number ways, depending available data biological question. example, see Article details hierarchical clustering run dataset. general, hierarchical clustering can computed pseudobulked single cell gene expression cell type frequencies Newick formated tree computed external data","code":"hcl <- buildClusterTreeFromPB(pb) # correlation matrix between all cell types C <- cor(t(standardize(cobj)))  # convert to distance dm <- as.dist(1 - abs(C))  # eval hierarchical clustering hcl <- hclust(dm) # Make sure packages are installed # BiocManager::install(c(\"ctc\", \"ape\", \"phylogram\")) library(ape) library(ctc) library(phylogram) library(tidyverse)  # Write tree to file,  # edit manually # then read back into R #   # Specify tree as text in Newick format txt = \"((CD14+ Monocytes,(B cells,(Dendritic cells,Megakaryocytes))),(CD8 T cells,(NK cells,(CD4 T cells,FCGR3A+ Monocytes))));\"  # read from text hcl_from_txt <- read.tree(text = txt) %>%                   as.dendrogram.phylo %>%                   as.hclust  # Alternatively,  # write existing tree to file # and edit manaully write(hc2Newick(hcl),file='hcl.nwk')  hcl_from_txt2 <- read.tree(file = 'hcl.nwk') %>%                   as.dendrogram.phylo %>%                   as.hclust"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Using crumblr in practice","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: aarch64-apple-darwin23.6.0 ## Running under: macOS Sonoma 14.7.1 ##  ## Matrix products: default ## BLAS/LAPACK: /opt/homebrew/Cellar/openblas/0.3.30/lib/libopenblasp-r0.3.30.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] muscat_1.22.0            crumblr_0.99.22          variancePartition_1.37.4 ## [4] BiocParallel_1.42.1      limma_3.64.3             ggplot2_3.5.2            ## [7] BiocStyle_2.36.0         ##  ## loaded via a namespace (and not attached): ##   [1] splines_4.5.1               bitops_1.0-9                ggplotify_0.1.2             ##   [4] tibble_3.3.0                lifecycle_1.0.4             Rdpack_2.6.4                ##   [7] edgeR_4.6.3                 doParallel_1.0.17           globals_0.18.0              ##  [10] lattice_0.22-7              MASS_7.3-65                 backports_1.5.0             ##  [13] magrittr_2.0.3              sass_0.4.10                 rmarkdown_2.29              ##  [16] jquerylib_0.1.4             yaml_2.3.10                 sctransform_0.4.2           ##  [19] minqa_1.2.8                 RColorBrewer_1.1-3          abind_1.4-8                 ##  [22] EnvStats_3.1.0              glmmTMB_1.1.11              GenomicRanges_1.60.0        ##  [25] purrr_1.1.0                 BiocGenerics_0.54.0         yulab.utils_0.2.0           ##  [28] circlize_0.4.16             GenomeInfoDbData_1.2.14     IRanges_2.42.0              ##  [31] S4Vectors_0.46.0            ggrepel_0.9.6               pbkrtest_0.5.5              ##  [34] irlba_2.3.5.1               listenv_0.9.1               tidytree_0.4.6              ##  [37] parallelly_1.45.1           pkgdown_2.1.3               codetools_0.2-20            ##  [40] DelayedArray_0.34.1         scuttle_1.18.0              tidyselect_1.2.1            ##  [43] shape_1.4.6.1               aplot_0.2.8                 UCSC.utils_1.4.0            ##  [46] farver_2.1.2                lme4_1.1-37                 ScaledMatrix_1.16.0         ##  [49] viridis_0.6.5               matrixStats_1.5.0           stats4_4.5.1                ##  [52] jsonlite_2.0.0              GetoptLong_1.0.5            BiocNeighbors_2.2.0         ##  [55] scater_1.36.0               iterators_1.0.14            systemfonts_1.2.3           ##  [58] foreach_1.5.2               tools_4.5.1                 progress_1.2.3              ##  [61] treeio_1.32.0               ragg_1.4.0                  Rcpp_1.1.0                  ##  [64] blme_1.0-6                  glue_1.8.0                  gridExtra_2.3               ##  [67] SparseArray_1.8.1           xfun_0.52                   mgcv_1.9-3                  ##  [70] DESeq2_1.48.1               MatrixGenerics_1.20.0       GenomeInfoDb_1.44.1         ##  [73] dplyr_1.1.4                 withr_3.0.2                 numDeriv_2016.8-1.1         ##  [76] BiocManager_1.30.26         fastmap_1.2.0               boot_1.3-31                 ##  [79] caTools_1.18.3              digest_0.6.37               rsvd_1.0.5                  ##  [82] R6_2.6.1                    gridGraphics_0.5-1          textshaping_1.0.1           ##  [85] colorspace_2.1-1            gtools_3.9.5                RhpcBLASctl_0.23-42         ##  [88] tidyr_1.3.1                 generics_0.1.4              data.table_1.17.8           ##  [91] corpcor_1.6.10              prettyunits_1.2.0           httr_1.4.7                  ##  [94] htmlwidgets_1.6.4           S4Arrays_1.8.1              pkgconfig_2.0.3             ##  [97] gtable_0.3.6                ComplexHeatmap_2.24.1       SingleCellExperiment_1.30.1 ## [100] XVector_0.48.0              remaCor_0.0.18              htmltools_0.5.8.1           ## [103] bookdown_0.43               TMB_1.9.17                  zigg_0.0.2                  ## [106] clue_0.3-66                 scales_1.4.0                Biobase_2.68.0              ## [109] png_0.1-8                   fANCOVA_0.6-1               reformulas_0.4.1            ## [112] ggfun_0.2.0                 knitr_1.50                  reshape2_1.4.4              ## [115] rjson_0.2.23                nlme_3.1-168                nloptr_2.2.1                ## [118] cachem_1.1.0                GlobalOptions_0.1.2         stringr_1.5.1               ## [121] KernSmooth_2.23-26          parallel_4.5.1              vipor_0.4.7                 ## [124] desc_1.4.3                  pillar_1.11.0               grid_4.5.1                  ## [127] vctrs_0.6.5                 gplots_3.2.0                BiocSingular_1.24.0         ## [130] beachmat_2.24.0             cluster_2.1.8.1             beeswarm_0.4.0              ## [133] evaluate_1.0.4              mvtnorm_1.3-3               cli_3.6.5                   ## [136] locfit_1.5-9.12             compiler_4.5.1              rlang_1.1.6                 ## [139] crayon_1.5.3                future.apply_1.20.0         labeling_0.4.3              ## [142] plyr_1.8.9                  fs_1.6.6                    ggbeeswarm_0.7.2            ## [145] stringi_1.8.7               viridisLite_0.4.2           lmerTest_3.1-3              ## [148] lazyeval_0.2.2              aod_1.3.3                   Matrix_1.7-3                ## [151] hms_1.1.3                   patchwork_1.3.1             future_1.67.0               ## [154] statmod_1.5.0               SummarizedExperiment_1.38.1 rbibutils_2.3               ## [157] Rfast_2.1.5.1               broom_1.0.9                 RcppParallel_5.1.10.9000    ## [160] bslib_0.9.0                 ggtree_3.16.3               ape_5.8-1"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr_theory.html","id":"asymptotic-normal-approximation","dir":"Articles","previous_headings":"","what":"Asymptotic normal approximation","title":"Normal approximation vs. empirical simulation","text":"Let vector {\\bf p} true fractions across D categories. Consider C total counts sampled Dirichlet-multinomial (DMN) distribution overdispersion \\tau, \\tau=1 reduces multinomial distribution. centered log ratio (CLR) ^{th} estimated fraction, \\hat p_i \\text{clr}(\\hat p_i) = \\log(\\hat p_i) - \\frac{1}{D}\\sum_{j=1}^D \\log(\\hat p_j) , show sampling variance well approximated \\text{var}[\\text{clr}(\\hat p_i)] =  \\frac{\\tau}{C} \\left[ \\frac{1}{\\hat p_i} - \\frac{2}{ D \\hat p_i} + \\frac{1}{D^2}\\sum_{j=1}^D \\frac{1}{\\hat p_j}  \\right] .","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr_theory.html","id":"simulations","dir":"Articles","previous_headings":"","what":"Simulations","title":"Normal approximation vs. empirical simulation","text":"sampling variance derived asymototic theory, examine behavior finite total counts. evaluate empirical variance 1,000 draws Dirichlet-multinomial distribution varying D, \\tau, C. pseudocount 0.5 added observed counts since asymptotic theory defined counts zero. plot standard deviation CLR transform empirical DMN asymptotic normal approximation range conditions. Results shown instances least 2 counts.","code":""},{"path":[]},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr_theory.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Normal approximation vs. empirical simulation","text":"asymptotic standard deviation shows good agreement empirical results even small values C, least 2 counts observed. practice, often reasonable assume sufficient number counts variable included analysis. Importantly, less 2 counts asymptotic theory gives larger standard deviation emprical results (results shown). Therefore, approach conservative underestimate true amount variation. asymptotic normal approximation accurate large total counts C, large proportions p, small overdispersion \\tau.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr_theory.html","id":"consideration-of-overdispersion","dir":"Articles","previous_headings":"","what":"Consideration of overdispersion","title":"Normal approximation vs. empirical simulation","text":"Based Equation (2), variance CLR-transformed proportions linear function \\tau. Importantly, downstream analysis CLR-transformed proportions precision-weighted linear (mixed) model variance stabilizing transform depends relative variances. Since relative variances invariant scale \\tau, applications value \\tau can set 1 instead estimated data. applications, crumblr can estimate \\tau data using crumblr(counts, tau=NULL). calls dmn.mle() estimate parameters DMN distribution substantially faster alternatives. note due theoretical properties variance estimate CLR-transformed proportions, precision weights invariant scale \\tau. can see empirically:","code":"library(crumblr)  data(IFNCellCounts)  counts <- df_cellCounts  # run crumblr with different tau values # show part of the weights matrix crumblr(counts, tau=1)$weights[1:3, 1:3] ##                  ctrl101 ctrl1015 ctrl1016 ## B cells         2.704599 5.000000 3.094438 ## CD14+ Monocytes 1.822824 4.143929 2.716263 ## CD4 T cells     2.044461 3.615231 2.433429 crumblr(counts, tau=5)$weights[1:3, 1:3] ##                  ctrl101 ctrl1015 ctrl1016 ## B cells         2.704599 5.000000 3.094438 ## CD14+ Monocytes 1.822824 4.143929 2.716263 ## CD4 T cells     2.044461 3.615231 2.433429 crumblr(counts, tau=NULL)$weights[1:3, 1:3] ##                  ctrl101 ctrl1015 ctrl1016 ## B cells         2.704599 5.000000 3.094438 ## CD14+ Monocytes 1.822824 4.143929 2.716263 ## CD4 T cells     2.044461 3.615231 2.433429"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/crumblr_theory.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Normal approximation vs. empirical simulation","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: aarch64-apple-darwin23.6.0 ## Running under: macOS Sonoma 14.7.1 ##  ## Matrix products: default ## BLAS/LAPACK: /opt/homebrew/Cellar/openblas/0.3.30/lib/libopenblasp-r0.3.30.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] parallel  stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] muscat_1.22.0            variancePartition_1.37.4 BiocParallel_1.42.1      ##  [4] limma_3.64.3             lubridate_1.9.4          forcats_1.0.0            ##  [7] stringr_1.5.1            dplyr_1.1.4              purrr_1.1.0              ## [10] readr_2.1.5              tidyr_1.3.1              tibble_3.3.0             ## [13] tidyverse_2.0.0          glue_1.8.0               HMP_2.0.1                ## [16] dirmult_0.1.3-5          crumblr_0.99.22          ggplot2_3.5.2            ## [19] BiocStyle_2.36.0         ##  ## loaded via a namespace (and not attached): ##   [1] splines_4.5.1               bitops_1.0-9                ggplotify_0.1.2             ##   [4] rpart_4.1.24                lifecycle_1.0.4             Rdpack_2.6.4                ##   [7] edgeR_4.6.3                 doParallel_1.0.17           globals_0.18.0              ##  [10] lattice_0.22-7              MASS_7.3-65                 backports_1.5.0             ##  [13] magrittr_2.0.3              sass_0.4.10                 rmarkdown_2.29              ##  [16] jquerylib_0.1.4             yaml_2.3.10                 sctransform_0.4.2           ##  [19] minqa_1.2.8                 RColorBrewer_1.1-3          abind_1.4-8                 ##  [22] EnvStats_3.1.0              glmmTMB_1.1.11              GenomicRanges_1.60.0        ##  [25] BiocGenerics_0.54.0         yulab.utils_0.2.0           circlize_0.4.16             ##  [28] GenomeInfoDbData_1.2.14     IRanges_2.42.0              S4Vectors_0.46.0            ##  [31] ggrepel_0.9.6               pbkrtest_0.5.5              irlba_2.3.5.1               ##  [34] listenv_0.9.1               tidytree_0.4.6              vegan_2.7-1                 ##  [37] parallelly_1.45.1           pkgdown_2.1.3               permute_0.9-8               ##  [40] codetools_0.2-20            DelayedArray_0.34.1         scuttle_1.18.0              ##  [43] tidyselect_1.2.1            shape_1.4.6.1               aplot_0.2.8                 ##  [46] UCSC.utils_1.4.0            farver_2.1.2                ScaledMatrix_1.16.0         ##  [49] lme4_1.1-37                 viridis_0.6.5               matrixStats_1.5.0           ##  [52] stats4_4.5.1                jsonlite_2.0.0              BiocNeighbors_2.2.0         ##  [55] GetoptLong_1.0.5            scater_1.36.0               iterators_1.0.14            ##  [58] systemfonts_1.2.3           foreach_1.5.2               tools_4.5.1                 ##  [61] progress_1.2.3              treeio_1.32.0               ragg_1.4.0                  ##  [64] Rcpp_1.1.0                  blme_1.0-6                  gridExtra_2.3               ##  [67] SparseArray_1.8.1           xfun_0.52                   mgcv_1.9-3                  ##  [70] DESeq2_1.48.1               MatrixGenerics_1.20.0       GenomeInfoDb_1.44.1         ##  [73] withr_3.0.2                 numDeriv_2016.8-1.1         BiocManager_1.30.26         ##  [76] fastmap_1.2.0               boot_1.3-31                 rsvd_1.0.5                  ##  [79] caTools_1.18.3              digest_0.6.37               timechange_0.3.0            ##  [82] R6_2.6.1                    gridGraphics_0.5-1          textshaping_1.0.1           ##  [85] colorspace_2.1-1            gtools_3.9.5                RhpcBLASctl_0.23-42         ##  [88] generics_0.1.4              data.table_1.17.8           corpcor_1.6.10              ##  [91] prettyunits_1.2.0           httr_1.4.7                  htmlwidgets_1.6.4           ##  [94] S4Arrays_1.8.1              pkgconfig_2.0.3             gtable_0.3.6                ##  [97] rpart.plot_3.1.3            ComplexHeatmap_2.24.1       SingleCellExperiment_1.30.1 ## [100] XVector_0.48.0              remaCor_0.0.18              htmltools_0.5.8.1           ## [103] bookdown_0.43               TMB_1.9.17                  zigg_0.0.2                  ## [106] clue_0.3-66                 scales_1.4.0                Biobase_2.68.0              ## [109] png_0.1-8                   fANCOVA_0.6-1               reformulas_0.4.1            ## [112] ggfun_0.2.0                 knitr_1.50                  tzdb_0.5.0                  ## [115] reshape2_1.4.4              rjson_0.2.23                nlme_3.1-168                ## [118] nloptr_2.2.1                cachem_1.1.0                GlobalOptions_0.1.2         ## [121] KernSmooth_2.23-26          vipor_0.4.7                 desc_1.4.3                  ## [124] pillar_1.11.0               grid_4.5.1                  vctrs_0.6.5                 ## [127] gplots_3.2.0                BiocSingular_1.24.0         beachmat_2.24.0             ## [130] cluster_2.1.8.1             beeswarm_0.4.0              evaluate_1.0.4              ## [133] mvtnorm_1.3-3               cli_3.6.5                   locfit_1.5-9.12             ## [136] compiler_4.5.1              rlang_1.1.6                 crayon_1.5.3                ## [139] future.apply_1.20.0         labeling_0.4.3              ggbeeswarm_0.7.2            ## [142] plyr_1.8.9                  fs_1.6.6                    stringi_1.8.7               ## [145] viridisLite_0.4.2           lmerTest_3.1-3              lazyeval_0.2.2              ## [148] aod_1.3.3                   Matrix_1.7-3                hms_1.1.3                   ## [151] patchwork_1.3.1             future_1.67.0               statmod_1.5.0               ## [154] SummarizedExperiment_1.38.1 rbibutils_2.3               Rfast_2.1.5.1               ## [157] broom_1.0.9                 RcppParallel_5.1.10.9000    bslib_0.9.0                 ## [160] ggtree_3.16.3               ape_5.8-1"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/integration.html","id":"load-and-process-single-cell-data","dir":"Articles","previous_headings":"","what":"Load and process single cell data","title":"Integration with dreamlet / SingleCellExperiment","text":"perform analysis PBMCs 8 individuals stimulated interferon-β Kang, et al, 2018, Nature Biotech. perform standard processing dreamlet compute pseudobulk applying crumblr. , single cell RNA-seq data downloaded ExperimentHub.","code":"library(dreamlet) library(muscat) library(ExperimentHub) library(scater)  # Download data, specifying EH2259 for the Kang, et al. study eh <- ExperimentHub() sce <- eh[[\"EH2259\"]]  sce$ind <- as.character(sce$ind)  # only keep singlet cells with sufficient reads sce <- sce[rowSums(counts(sce) > 0) > 0, ] sce <- sce[, colData(sce)$multiplets == \"singlet\"]  # compute QC metrics qc <- perCellQCMetrics(sce)  # remove cells with few or many detected genes ol <- isOutlier(metric = qc$detected, nmads = 2, log = TRUE) sce <- sce[, !ol]  # set variable indicating stimulated (stim) or control (ctrl) sce$StimStatus <- sce$stim"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/integration.html","id":"aggregate-to-pseudobulk","dir":"Articles","previous_headings":"Load and process single cell data","what":"Aggregate to pseudobulk","title":"Integration with dreamlet / SingleCellExperiment","text":"Dreamlet creates pseudobulk dataset:","code":"# Since 'ind' is the individual and 'StimStatus' is the stimulus status, # create unique identifier for each sample sce$id <- paste0(sce$StimStatus, sce$ind)  # Create pseudobulk data by specifying cluster_id and sample_id for aggregating cells pb <- aggregateToPseudoBulk(sce,   assay = \"counts\",   cluster_id = \"cell\",   sample_id = \"id\",   verbose = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/integration.html","id":"process-data","dir":"Articles","previous_headings":"Load and process single cell data","what":"Process data","title":"Integration with dreamlet / SingleCellExperiment","text":"evaluate whether observed cell proportions change response interferon-β.","code":"library(crumblr)  # use dreamlet::cellCounts() to extract data cellCounts(pb)[1:3, 1:3] ##          B cells CD14+ Monocytes CD4 T cells ## ctrl101      101             136         288 ## ctrl1015     424             644         819 ## ctrl1016     119             315         413 # Apply crumblr transformation # cobj is an EList object compatable with limma workflow # cobj$E stores transformed values # cobj$weights stores precision weights cobj <- crumblr(cellCounts(pb))"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/integration.html","id":"analysis","dir":"Articles","previous_headings":"Load and process single cell data","what":"Analysis","title":"Integration with dreamlet / SingleCellExperiment","text":"Now continue downstream analysis Given results , see CD8 T cells others change relative abundance following treatment interferon-β.","code":"library(variancePartition)  fit <- dream(cobj, ~ StimStatus + ind, colData(pb)) fit <- eBayes(fit)  topTable(fit, coef = \"StimStatusstim\", number = Inf) ##                         logFC    AveExpr          t     P.Value  adj.P.Val         B ## CD8 T cells       -0.25085170  0.0857175 -4.0787416 0.002436375 0.01949100 -1.279815 ## Dendritic cells    0.37386979 -2.1849234  3.1619195 0.010692544 0.02738587 -2.638507 ## CD14+ Monocytes   -0.10525402  1.2698117 -3.1226341 0.011413912 0.02738587 -2.709377 ## B cells           -0.10478652  0.5516882 -3.0134349 0.013692935 0.02738587 -2.940542 ## CD4 T cells       -0.07840101  2.0201947 -2.2318104 0.050869691 0.08139151 -4.128069 ## FCGR3A+ Monocytes  0.07425165 -0.2567492  1.6647681 0.128337022 0.17111603 -4.935304 ## NK cells           0.10270672  0.3797777  1.5181860 0.161321761 0.18436773 -5.247806 ## Megakaryocytes     0.01377768 -1.8655172  0.1555131 0.879651456 0.87965146 -6.198336"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/integration.html","id":"multivariate-testing-along-a-tree","dir":"Articles","previous_headings":"Load and process single cell data","what":"Multivariate testing along a tree","title":"Integration with dreamlet / SingleCellExperiment","text":"ere construct hierarchical clustering cell types based gene expression pseudobulk, perform multivariate test internal node tree based leaf nodes. results leaves topTable() .","code":"# hierarchical cluster based on pseudobulked gene expression hcl <- buildClusterTreeFromPB(pb)  # Perform multivariate test across the hierarchy res <- treeTest(fit, cobj, hcl, coef = \"StimStatusstim\")  # Plot hierarchy and testing results plotTreeTest(res)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/articles/integration.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Integration with dreamlet / SingleCellExperiment","text":"","code":"## R version 4.5.1 (2025-06-13) ## Platform: aarch64-apple-darwin23.6.0 ## Running under: macOS Sonoma 14.7.1 ##  ## Matrix products: default ## BLAS/LAPACK: /opt/homebrew/Cellar/openblas/0.3.30/lib/libopenblasp-r0.3.30.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] crumblr_0.99.22             muscData_1.22.0             scater_1.36.0               ##  [4] scuttle_1.18.0              ExperimentHub_2.16.1        AnnotationHub_3.16.1        ##  [7] BiocFileCache_2.16.1        dbplyr_2.5.0                muscat_1.22.0               ## [10] dreamlet_1.6.0              SingleCellExperiment_1.30.1 SummarizedExperiment_1.38.1 ## [13] Biobase_2.68.0              GenomicRanges_1.60.0        GenomeInfoDb_1.44.1         ## [16] IRanges_2.42.0              S4Vectors_0.46.0            BiocGenerics_0.54.0         ## [19] generics_0.1.4              MatrixGenerics_1.20.0       matrixStats_1.5.0           ## [22] variancePartition_1.37.4    BiocParallel_1.42.1         limma_3.64.3                ## [25] ggplot2_3.5.2               BiocStyle_2.36.0            ##  ## loaded via a namespace (and not attached): ##   [1] fs_1.6.6                  bitops_1.0-9              httr_1.4.7                ##   [4] RColorBrewer_1.1-3        doParallel_1.0.17         Rgraphviz_2.52.0          ##   [7] numDeriv_2016.8-1.1       tools_4.5.1               sctransform_0.4.2         ##  [10] backports_1.5.0           R6_2.6.1                  metafor_4.8-0             ##  [13] lazyeval_0.2.2            mgcv_1.9-3                GetoptLong_1.0.5          ##  [16] withr_3.0.2               prettyunits_1.2.0         gridExtra_2.3             ##  [19] cli_3.6.5                 textshaping_1.0.1         labeling_0.4.3            ##  [22] sass_0.4.10               KEGGgraph_1.68.0          SQUAREM_2021.1            ##  [25] mvtnorm_1.3-3             blme_1.0-6                pkgdown_2.1.3             ##  [28] mixsqp_0.3-54             yulab.utils_0.2.0         systemfonts_1.2.3         ##  [31] zenith_1.10.0             parallelly_1.45.1         invgamma_1.2              ##  [34] RSQLite_2.4.2             gridGraphics_0.5-1        shape_1.4.6.1             ##  [37] gtools_3.9.5              dplyr_1.1.4               Matrix_1.7-3              ##  [40] metadat_1.4-0             ggbeeswarm_0.7.2          abind_1.4-8               ##  [43] lifecycle_1.0.4           yaml_2.3.10               edgeR_4.6.3               ##  [46] mathjaxr_1.8-0            gplots_3.2.0              SparseArray_1.8.1         ##  [49] grid_4.5.1                blob_1.2.4                crayon_1.5.3              ##  [52] lattice_0.22-7            beachmat_2.24.0           msigdbr_25.1.1            ##  [55] annotate_1.86.1           KEGGREST_1.48.1           pillar_1.11.0             ##  [58] knitr_1.50                ComplexHeatmap_2.24.1     rjson_0.2.23              ##  [61] boot_1.3-31               corpcor_1.6.10            future.apply_1.20.0       ##  [64] codetools_0.2-20          glue_1.8.0                ggfun_0.2.0               ##  [67] data.table_1.17.8         treeio_1.32.0             vctrs_0.6.5               ##  [70] png_0.1-8                 Rdpack_2.6.4              gtable_0.3.6              ##  [73] assertthat_0.2.1          cachem_1.1.0              zigg_0.0.2                ##  [76] xfun_0.52                 mime_0.13                 rbibutils_2.3             ##  [79] S4Arrays_1.8.1            Rfast_2.1.5.1             reformulas_0.4.1          ##  [82] iterators_1.0.14          statmod_1.5.0             nlme_3.1-168              ##  [85] pbkrtest_0.5.5            ggtree_3.16.3             bit64_4.6.0-1             ##  [88] filelock_1.0.3            progress_1.2.3            EnvStats_3.1.0            ##  [91] bslib_0.9.0               TMB_1.9.17                irlba_2.3.5.1             ##  [94] vipor_0.4.7               KernSmooth_2.23-26        colorspace_2.1-1          ##  [97] rmeta_3.0                 DBI_1.2.3                 DESeq2_1.48.1             ## [100] tidyselect_1.2.1          bit_4.6.0                 compiler_4.5.1            ## [103] curl_6.4.0                graph_1.86.0              BiocNeighbors_2.2.0       ## [106] desc_1.4.3                DelayedArray_0.34.1       bookdown_0.43             ## [109] scales_1.4.0              caTools_1.18.3            remaCor_0.0.18            ## [112] rappdirs_0.3.3            stringr_1.5.1             digest_0.6.37             ## [115] minqa_1.2.8               rmarkdown_2.29            aod_1.3.3                 ## [118] XVector_0.48.0            RhpcBLASctl_0.23-42       htmltools_0.5.8.1         ## [121] pkgconfig_2.0.3           lme4_1.1-37               sparseMatrixStats_1.20.0  ## [124] mashr_0.2.79              fastmap_1.2.0             rlang_1.1.6               ## [127] GlobalOptions_0.1.2       htmlwidgets_1.6.4         UCSC.utils_1.4.0          ## [130] DelayedMatrixStats_1.30.0 farver_2.1.2              jquerylib_0.1.4           ## [133] jsonlite_2.0.0            BiocSingular_1.24.0       RCurl_1.98-1.17           ## [136] magrittr_2.0.3            ggplotify_0.1.2           GenomeInfoDbData_1.2.14   ## [139] patchwork_1.3.1           Rcpp_1.1.0                ape_5.8-1                 ## [142] babelgene_22.9            viridis_0.6.5             EnrichmentBrowser_2.38.0  ## [145] stringi_1.8.7             MASS_7.3-65               plyr_1.8.9                ## [148] listenv_0.9.1             parallel_4.5.1            ggrepel_0.9.6             ## [151] Biostrings_2.76.0         splines_4.5.1             hms_1.1.3                 ## [154] circlize_0.4.16           locfit_1.5-9.12           reshape2_1.4.4            ## [157] ScaledMatrix_1.16.0       BiocVersion_3.21.1        XML_3.99-0.18             ## [160] evaluate_1.0.4            RcppParallel_5.1.10.9000  BiocManager_1.30.26       ## [163] nloptr_2.2.1              foreach_1.5.2             tidyr_1.3.1               ## [166] purrr_1.1.0               future_1.67.0             clue_0.3-66               ## [169] scattermore_1.2           ashr_2.2-63               rsvd_1.0.5                ## [172] broom_1.0.9               xtable_1.8-4              tidytree_0.4.6            ## [175] fANCOVA_0.6-1             viridisLite_0.4.2         ragg_1.4.0                ## [178] truncnorm_1.0-9           tibble_3.3.0              aplot_0.2.8               ## [181] lmerTest_3.1-3            glmmTMB_1.1.11            memoise_2.0.1             ## [184] beeswarm_0.4.0            AnnotationDbi_1.70.0      cluster_2.1.8.1           ## [187] globals_0.18.0            GSEABase_1.70.0"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman GE, Roussos P. (2025) Fast, flexible analysis differences cellular composition crumblr. bioRxiv doi:10.1101/2025.01.29.635498","code":"@Article{,   title = {Fast, flexible analysis of differences in cellular composition with crumblr},   author = {Gabriel E. Hoffman and Panos Roussos},   year = {2025},   journal = {bioRxiv},   doi = {10.1101/2025.01.29.635498}, }"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/index.html","id":"count-ratio-uncertainty-modeling-based-linear-regression","dir":"","previous_headings":"","what":"Count ratio uncertainty modeling based linear regression","title":"Count ratio uncertainty modeling base linear regression","text":"crumblr package enables analysis count ratio data using precision-weighted linear (mixed) models, PCA clustering. crumblr’s fast, normal approximation transformed count data Dirichlet-multinomial model allows use standard workflows analyze count ratio data modeling heteroskedasticity.  Preprint: Hoffman Roussos. 2025. Fast, flexible analysis differences cellular composition crumblr. biorxiv","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Count ratio uncertainty modeling base linear regression","text":"Analysis count ratio data (.e. fractions) requires special consideration since data non-normal, heteroskedastic, spans low rank space. counts can considered directly using Poisson, negative binomial, Dirichlet-multinomial models simple regression applications, can problematic since 1) can computationally expensive, 2) can produce poorly calibrated hypothesis tests, 3) challenging extend applications. widely used centered log-ratio (CLR) transform compositional data analysis makes count ratio data normal enables use linear models, standard methods. Yet CLR-transformed data still highly heteroskedastic: precision measurements varies widely. important factor considered existing methods. crumblr uses fast asymptotic normal approximation CLR-transformed counts Dirichlet-multinomial distribution model sampling variance transformed counts. crumblr enables incorporating sampling variance precision weights linear (mixed) models order increase power control false positive rate. crumblr also uses variance stabilizing transform (vst) based precision weights improve performance PCA clustering.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Count ratio uncertainty modeling base linear regression","text":"","code":"# 1) Make sure Bioconductor is installed if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  # 2) Install crumblr and dependencies BiocManager::install('DiseaseNeurogenomics/crumblr')"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/index.html","id":"introduction-to-compositional-data-analysis","dir":"","previous_headings":"","what":"Introduction to compositional data analysis","title":"Count ratio uncertainty modeling base linear regression","text":"Brief intro bioinformatics Quinn, et al. 2018 Book analysis R van den Boogaart Tolosana-Delgado, 2013","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/IFNCellCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell counts following interferon treatment — IFNCellCounts","title":"Cell counts following interferon treatment — IFNCellCounts","text":"Counts single cell RNA-seq data treated untreated samples Kang, et al (2018).","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/IFNCellCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell counts following interferon treatment — IFNCellCounts","text":"","code":"data(IFNCellCounts)  info  df_cellCounts  hcl"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/IFNCellCounts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cell counts following interferon treatment — IFNCellCounts","text":"info metadata sample df_cellCounts data.frame counts sample hcl cluster cell types based pseudobulk expression object class data.frame 16 rows 4 columns. object class matrix (inherits array) 16 rows 8 columns. object class hclust length 7.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/IFNCellCounts.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cell counts following interferon treatment — IFNCellCounts","text":"Kang, Hyun Min, et al. \"Multiplexed droplet single-cell RNA-sequencing using natural genetic variation.\" Nature Biotechnology 36.1 (2018): 89-94.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/buildClusterTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform hierarchical clustering on reducedDim — buildClusterTree","title":"Perform hierarchical clustering on reducedDim — buildClusterTree","text":"Perform hierarchical clustering dimension reduction single cell expression data","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/buildClusterTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform hierarchical clustering on reducedDim — buildClusterTree","text":"","code":"buildClusterTree(   sce,   reduction,   labelCol,   method.dist = c(\"cosine\", \"euclidean\", \"maximum\", \"manhattan\", \"canberra\", \"binary\",     \"minkowski\"),   method.hclust = c(\"complete\", \"ward.D\", \"ward.D2\") )"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/buildClusterTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform hierarchical clustering on reducedDim — buildClusterTree","text":"sce SingleCellExperiment object reduction field reducedDims(sce) use labelCol column SingleCellExperiment storing cell type annotations method.dist method dist(..,method=method.dist) method.hclust method hclust(..,method=method.hclust)","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/buildClusterTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform hierarchical clustering on reducedDim — buildClusterTree","text":"hierarchical clustering computed hclust()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/buildClusterTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform hierarchical clustering on reducedDim — buildClusterTree","text":"","code":"library(muscat)  data(example_sce)  hcl_test = buildClusterTree(example_sce, \"TSNE\", \"cluster_id\")"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clr.html","id":null,"dir":"Reference","previous_headings":"","what":"Centered log ratio transform — clr","title":"Centered log ratio transform — clr","text":"Compute centered log ratio (CLR) transform count matrix.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Centered log ratio transform — clr","text":"","code":"clr(counts, pseudocount = 0.5)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Centered log ratio transform — clr","text":"counts count data samples rows variables columns pseudocount added counts avoid issues zeros","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Centered log ratio transform — clr","text":"matrix CLR transformed counts","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Centered log ratio transform — clr","text":"CLR vector x counts D categories defined clr(x) = log(x) - mean(log(x)). details see van den Boogaart Tolosana-Delgado (2013).","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Centered log ratio transform — clr","text":"Van den Boogaart, K. Gerald, Raimon Tolosana-Delgado. Analyzing compositional data R. Vol. 122. Berlin: Springer, 2013.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Centered log ratio transform — clr","text":"","code":"# set probability of each category prob <- c(0.1, 0.2, 0.3, 0.5)  # number of total counts countsTotal <- 300  # number of samples n_samples <- 5  # simulate info for each sample info <- data.frame(Age = rgamma(n_samples, 50, 1)) rownames(info) <- paste0(\"sample_\", 1:n_samples)  # simulate counts from multinomial counts <- t(rmultinom(n_samples, size = countsTotal, prob = prob)) colnames(counts) <- paste0(\"cat_\", 1:length(prob)) rownames(counts) <- paste0(\"sample_\", 1:n_samples)  # centered log ratio clr(counts) #>               cat_1      cat_2     cat_3     cat_4 #> sample_1 -0.8671869 -0.2423589 0.3158128 0.7937330 #> sample_2 -0.8124421 -0.2015330 0.2382568 0.7757184 #> sample_3 -0.8696391 -0.1320401 0.4362337 0.5654455 #> sample_4 -0.9686262 -0.2236539 0.4015821 0.7906980 #> sample_5 -0.9667979 -0.2218256 0.3815515 0.8070720"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clrInv.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse of Centered log ratio transform — clrInv","title":"Inverse of Centered log ratio transform — clrInv","text":"Compute inverse centered log ratio (CLR) transform count matrix.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clrInv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse of Centered log ratio transform — clrInv","text":"","code":"clrInv(x)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clrInv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse of Centered log ratio transform — clrInv","text":"x CLR transform values","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clrInv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse of Centered log ratio transform — clrInv","text":"matrix fractions","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clrInv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inverse of Centered log ratio transform — clrInv","text":"Given CLR transformed values, compute original fractions","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clrInv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inverse of Centered log ratio transform — clrInv","text":"Van den Boogaart, K. Gerald, Raimon Tolosana-Delgado. Analyzing compositional data R. Vol. 122. Berlin: Springer, 2013.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/clrInv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inverse of Centered log ratio transform — clrInv","text":"","code":"# set probability of each category prob <- c(0.1, 0.2, 0.3, 0.5)  # number of total counts countsTotal <- 300  # number of samples n_samples <- 5  # simulate info for each sample info <- data.frame(Age = rgamma(n_samples, 50, 1)) rownames(info) <- paste0(\"sample_\", 1:n_samples)  # simulate counts from multinomial counts <- t(rmultinom(n_samples, size = countsTotal, prob = prob)) colnames(counts) <- paste0(\"cat_\", 1:length(prob)) rownames(counts) <- paste0(\"sample_\", 1:n_samples)  # Fractions counts / rowSums(counts) #>               cat_1     cat_2     cat_3     cat_4 #> sample_1 0.08666667 0.2100000 0.2833333 0.4200000 #> sample_2 0.06000000 0.1966667 0.3133333 0.4300000 #> sample_3 0.09000000 0.1700000 0.2800000 0.4600000 #> sample_4 0.11333333 0.2000000 0.2500000 0.4366667 #> sample_5 0.14000000 0.1633333 0.2566667 0.4400000  # centered log ratio, with zero pseudocount clr(counts, 0) #>               cat_1       cat_2     cat_3     cat_4 #> sample_1 -0.9119446 -0.02690638 0.2726101 0.6662408 #> sample_2 -1.2023823 -0.01521665 0.4505407 0.7670583 #> sample_3 -0.8505964 -0.21460761 0.2843836 0.7808204 #> sample_4 -0.6769871 -0.10900307 0.1141405 0.6718497 #> sample_5 -0.4763547 -0.32220402 0.1297811 0.6687776  # recover fractions from CLR transformed values clrInv(clr(counts, 0)) #>               cat_1     cat_2     cat_3     cat_4 #> sample_1 0.08666667 0.2100000 0.2833333 0.4200000 #> sample_2 0.06000000 0.1966667 0.3133333 0.4300000 #> sample_3 0.09000000 0.1700000 0.2800000 0.4600000 #> sample_4 0.11333333 0.2000000 0.2500000 0.4366667 #> sample_5 0.14000000 0.1633333 0.2566667 0.4400000"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/crumblr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"crumblr — crumblr-package","title":"crumblr — crumblr-package","text":"Crumblr enables analysis count ratio data using precision weighted linear (mixed) models.  uses asymptotic normal approximation variance following centered log ration transform (CLR) widely used compositional data analysis.  Crumblr provides fast, flexible alternative GLMs GLMM's retaining high power controlling false positive rate.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/crumblr-package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"crumblr — crumblr-package","text":"none","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/crumblr.html","id":null,"dir":"Reference","previous_headings":"","what":"Count ratio uncertainty modeling based linear regression — crumblr","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"Count ratio uncertainty modeling based linear regression (crumblr) returns CLR-transformed counts observation-level inverse-variance weights use weighted linear models.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/crumblr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"","code":"crumblr(   counts,   pseudocount = 0.5,   method = c(\"clr\", \"clr_2class\"),   tau = 1,   max.ratio = 5,   quant = 0.05 )  # S4 method for class 'matrix' crumblr(   counts,   pseudocount = 0.5,   method = c(\"clr\", \"clr_2class\"),   tau = 1,   max.ratio = 5,   quant = 0.05 )  # S4 method for class 'data.frame' crumblr(   counts,   pseudocount = 0.5,   method = c(\"clr\", \"clr_2class\"),   tau = 1,   max.ratio = 5,   quant = 0.05 )"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/crumblr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"counts count data samples rows variables columns pseudocount added counts avoid issues zeros method \"clr\" computes standard centered log ratio precision weights based delta approximation. \"clr_2class\" computes clr() transform category using 2 classes: 1) counts category , 2) counts _not_ category . tau overdispersion parameter Dirichlet multinomial.  NULL, estimate observed counts. max.ratio regularize estimates weights maximum ratio max.ratio maximum quant quantile value quant quantile value used max.ratio","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/crumblr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"EList object following components: E: numeric matrix CLR transformed counts weights: numeric matrix observation-level inverse-variance weights","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/crumblr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"Evaluate centered log ratio (CLR) transform count matrix, asymptotic theoretical variances transformed observation.  asymptotic normal approximation increasingly accurate small overdispersion \\(\\tau\\), large total counts \\(C\\), large proportions \\(p\\), shows good agreement empirical results situations.  practice, often reasonable assume sufficient number counts variable included analysis anyway.  feasibility assumption user determine. Given array p storing proportions one sample across categories, delta approximation uses term 1/p.  can unstable small values p, estimated variances can sensitive small changes proportions.  address , \"clr_2class\" method computes clr() transform category using 2 classes: 1) counts category , 2) counts _not_ category . Since class (2) now sums counts across categories, small proportions avoided variance estimates stable. real data, asymptotic variance formula can give weights vary substantially across samples give high weights subset samples.  order address , regularize weights reduce variation weights maximum ratio max.ratio maximum quant quantile value.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/crumblr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count ratio uncertainty modeling based linear regression — crumblr","text":"","code":"# set probability of each category prob <- c(0.1, 0.2, 0.3, 0.5)  # number of total counts countsTotal <- 300  # number of samples n_samples <- 100  # simulate info for each sample info <- data.frame(Age = rgamma(n_samples, 50, 1)) rownames(info) <- paste0(\"sample_\", 1:n_samples)  # simulate counts from multinomial counts <- t(rmultinom(n_samples, size = countsTotal, prob = prob)) colnames(counts) <- paste0(\"cat_\", 1:length(prob)) rownames(counts) <- paste0(\"sample_\", 1:n_samples)  # run crumblr on counts cobj <- crumblr(counts)  # run standard variancePartition analysis on crumblr results library(variancePartition) #> Loading required package: limma #> Loading required package: BiocParallel #>  #> Attaching package: ‘variancePartition’ #> The following object is masked from ‘package:limma’: #>  #>     topTable  fit <- dream(cobj, ~Age, info) fit <- eBayes(fit)  topTable(fit, coef = \"Age\", sort.by = \"none\") #>               logFC    AveExpr          t   P.Value adj.P.Val         B #> cat_1  0.0030984935 -0.8318606  1.4171050 0.1593695 0.6374780 -7.824921 #> cat_2 -0.0008101691 -0.1620569 -0.4812885 0.6312984 0.6970844 -8.605226 #> cat_3 -0.0009568513  0.2445150 -0.6331966 0.5279620 0.6970844 -8.488427 #> cat_4 -0.0005653714  0.7494026 -0.3903129 0.6970844 0.6970844 -8.615702"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/diffTree.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare difference in estimates between two trees — diffTree","title":"Compare difference in estimates between two trees — diffTree","text":"Compare difference coefficient estimates two trees.  node , test evaluates tree1[] - tree2[] = 0.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/diffTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare difference in estimates between two trees — diffTree","text":"","code":"diffTree(tree1, tree2)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/diffTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare difference in estimates between two trees — diffTree","text":"tree1 object type treedata treeTest() tree2 object type treedata treeTest()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/diffTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare difference in estimates between two trees — diffTree","text":"comparison coefficient estimates node","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/diffTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare difference in estimates between two trees — diffTree","text":"fixed effect test performed node using treeTest() method = \"FE.empirical\" method = \"FE\", coefficient estimate standard error estimated node based children.  function performs two-sample z-test test given coefficient tree1 significantly different corresponding coefficient tree2.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/diffTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare difference in estimates between two trees — diffTree","text":"","code":"library(variancePartition)  # Load cell counts, clustering and metadata # from Kang, et al. (2018) https://doi.org/10.1038/nbt.4042 data(IFNCellCounts)  # Simulate a factor with 2 levels called DiseaseRand set.seed(123) info$DiseaseRand <- sample(LETTERS[seq(2)], nrow(info), replace = TRUE) info$DiseaseRand <- factor(info$DiseaseRand, LETTERS[seq(2)])  # Apply crumblr transformation cobj <- crumblr(df_cellCounts)  # Use dream workflow to analyze each cell separately fit <- dream(cobj, ~ StimStatus + ind, info) fit <- eBayes(fit)  # Perform multivariate test across the hierarchy res1 <- treeTest(fit, cobj, hcl, coef = \"StimStatusstim\")  # Perform same test, but on DiseaseRand fit2 <- dream(cobj, ~DiseaseRand, info) fit2 <- eBayes(fit2) res2 <- treeTest(fit2, cobj, hcl, coef = \"DiseaseRandB\")  # Compare the coefficient estimates at each node # Test if res1 - res2 is significantly different from zero resDiff <- diffTree(res1, res2)  resDiff #> 'treedata' S4 object'. #>  #> ...@ phylo: #>  #> Phylogenetic tree with 8 tips and 7 internal nodes. #>  #> Tip labels: #>   B cells, CD14+ Monocytes, CD4 T cells, CD8 T cells, Dendritic cells, FCGR3A+ #> Monocytes, ... #> Node labels: #>   B cells/CD14+ Monocytes/CD4 T cells/CD8 T cells/Dendritic cells/FCGR3A+ #> Monocytes/Megakaryocytes/NK cells, B cells/CD4 T cells/CD8 T #> cells/Megakaryocytes/NK cells, CD14+ Monocytes/Dendritic cells/FCGR3A+ #> Monocytes, CD14+ Monocytes/FCGR3A+ Monocytes, B cells/CD4 T cells/CD8 T #> cells/NK cells, CD4 T cells/CD8 T cells/NK cells, ... #>  #> Rooted; includes branch length(s). #>  #> with the following features available: #>   'beta', 'se', 'stat', 'pvalue', 'n_features', 'lambda', 'method', 'FDR'. #>  #> # The associated data tibble abstraction: 15 × 11 #> # The 'node', 'label' and 'isTip' are from the phylo tree. #>     node label      isTip    beta     se   stat  pvalue n_features lambda method #>    <int> <chr>      <lgl>   <dbl>  <dbl>  <dbl>   <dbl>      <dbl>  <dbl> <chr>  #>  1     1 B cells    TRUE   0.0625 0.151   0.414 6.79e-1          1   0.01 FE.em… #>  2     2 CD14+ Mon… TRUE  -0.0493 0.152  -0.324 7.46e-1          1   0.01 FE.em… #>  3     3 CD4 T cel… TRUE  -0.327  0.208  -1.57  1.16e-1          1   0.01 FE.em… #>  4     4 CD8 T cel… TRUE  -0.229  0.372  -0.615 5.38e-1          1   0.01 FE.em… #>  5     5 Dendritic… TRUE   0.367  0.281   1.30  1.93e-1          1   0.01 FE.em… #>  6     6 FCGR3A+ M… TRUE   0.528  0.181   2.92  3.45e-3          1   0.01 FE.em… #>  7     7 Megakaryo… TRUE  -0.152  0.191  -0.798 4.25e-1          1   0.01 FE.em… #>  8     8 NK cells   TRUE  -0.0955 0.157  -0.606 5.44e-1          1   0.01 FE.em… #>  9     9 B cells/C… FALSE -0.0459 0.0242 -1.90  5.74e-2          8   0.01 FE.em… #> 10    10 B cells/C… FALSE -0.197  0.0520 -3.79  1.51e-4          5   0.01 FE.em… #> # ℹ 5 more rows #> # ℹ 1 more variable: FDR <dbl>  plotTreeTest(resDiff)   plotTreeTestBeta(resDiff)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/dmn_mle.html","id":null,"dir":"Reference","previous_headings":"","what":"MLE for Dirichlet Multinomial — dmn_mle","title":"MLE for Dirichlet Multinomial — dmn_mle","text":"MLE Dirichlet Multinomial","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/dmn_mle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MLE for Dirichlet Multinomial — dmn_mle","text":"","code":"dmn_mle(counts, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/dmn_mle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MLE for Dirichlet Multinomial — dmn_mle","text":"counts matrix rows samples columns categories ... additional arguments passed optim()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/dmn_mle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MLE for Dirichlet Multinomial — dmn_mle","text":"list storing alpha parameter estimates, logLik, details convergence alpha estimated \\(alpha\\) parameters overdispersion Overdispersion value \\(1 + \\rho^2(n-1)\\) compared multinomial logLik value function scale scaling \\(\\alpha\\) parameters computed second optimization step evals number function evaluations step 1 convergence convergence details step 1","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/dmn_mle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MLE for Dirichlet Multinomial — dmn_mle","text":"Maximize Dirichlet Multinomial (DMN) log-likelihood optim() using log likelihood function gradient.  method uses second round optimization estimate scale \\(\\alpha\\) parameters, necessary accurate estimation overdispersion metric. covariance counts category DMN distributed data \\(n(diag(p) - pp^T) (1 + \\rho^2(n-1))\\) \\(n\\) total counts, vector proportions  \\(p\\), \\(\\rho^2 = 1 / (a_0 + 1)\\) \\(a_0 = \\sum_i \\alpha_i\\).  count data overdispersed factor \\(1 + \\rho^2(n-1)\\) compared multinomial (MN) distribution.  \\(a_0\\) increases, DMN converges MN. See https://en.wikipedia.org/wiki/Dirichlet-multinomial_distribution#Matrix_notation","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/dmn_mle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MLE for Dirichlet Multinomial — dmn_mle","text":"","code":"library(HMP) #> Loading required package: dirmult #>  #> Attaching package: ‘HMP’ #> The following object is masked from ‘package:dirmult’: #>  #>     weirMoM  set.seed(1)  n_samples <- 1000 n_counts <- 5000 alpha <- c(500, 1000, 2000)  # Dirichlet.multinomial counts <- Dirichlet.multinomial(rep(n_counts, n_samples), alpha)  fit <- dmn_mle(counts)  fit #> $alpha #>    Taxa 1    Taxa 2    Taxa 3  #>  506.3946 1015.2996 2027.6421  #>  #> $overdispersion #> [1] 2.408036 #>  #> $logLik #> [1] -4777957 #>  #> $scale #> [1] 0.7098813 #>  #> $evals #> function gradient  #>        2        2  #>  #> $convergence #> [1] 0 #>   # overdispersion: true value a0 <- sum(alpha) rhoSq <- 1 / (a0 + 1) 1 + rhoSq * (n_counts - 1) #> [1] 2.427878  # multinomial, so overdispersion is 1 counts <- t(rmultinom(n_samples, n_counts, prob = alpha / sum(alpha)))  dmn_mle(counts) #> $alpha #> [1] 2165173253 4324433613 8651164924 #>  #> $overdispersion #> [1] 1 #>  #> $logLik #> [1] -4779160 #>  #> $scale #> [1] 70011.04 #>  #> $evals #> function gradient  #>       33       33  #>  #> $convergence #> [1] 0 #>  # #"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/logFrac.html","id":null,"dir":"Reference","previous_headings":"","what":"Log fractions and precision weights — logFrac","title":"Log fractions and precision weights — logFrac","text":"Compute log fractions precision weights matrix c ounts, columns variables rows samples","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/logFrac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log fractions and precision weights — logFrac","text":"","code":"logFrac(counts, pseudocount = 0.5, max.ratio = 5, quant = 0.05)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/logFrac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log fractions and precision weights — logFrac","text":"counts count data samples rows variables columns pseudocount added counts avoid issues zeros max.ratio regularize estimates weights maximum ratio max.ratio maximum quant quantile value quant quantile value used max.ratio","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/logFrac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log fractions and precision weights — logFrac","text":"EList object following components: E: numeric matrix log transformed counts weights: numeric matrix observation-level inverse-variance weights","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/logFrac.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log fractions and precision weights — logFrac","text":"real data, asymptotic variance formula can give weights vary substantially across samples give high weights subset samples.  order address , regularize weights reduce variation weights maximum ratio max.ratio maximum quant quantile value.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/logFrac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log fractions and precision weights — logFrac","text":"","code":"# set probability of each category prob <- c(0.1, 0.2, 0.3, 0.5)  # number of total counts countsTotal <- 300  # number of samples n_samples <- 100  # simulate info for each sample info <- data.frame(Age = rgamma(n_samples, 50, 1)) rownames(info) <- paste0(\"sample_\", 1:n_samples)  # simulate counts from multinomial counts <- t(rmultinom(n_samples, size = countsTotal, prob = prob)) colnames(counts) <- paste0(\"cat_\", 1:length(prob)) rownames(counts) <- paste0(\"sample_\", 1:n_samples)  # run logFrac on counts cobj <- logFrac(counts)  # run standard variancePartition analysis on crumblr results library(variancePartition)  fit <- dream(cobj, ~ Age, info) fit <- eBayes(fit)  topTable(fit, coef = \"Age\", sort.by = \"none\") #>               logFC    AveExpr           t   P.Value adj.P.Val         B #> cat_1  0.0003227888 -2.4019876  0.09838761 0.9218201 0.9218201 -8.863774 #> cat_2 -0.0012459745 -1.6944100 -0.64903768 0.5177915 0.9218201 -8.599812 #> cat_3  0.0009504719 -1.3192849  0.60346707 0.5475549 0.9218201 -8.625023 #> cat_4 -0.0001702998 -0.7906898 -0.16652797 0.8680754 0.9218201 -8.785482"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/meanSdPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot row standard deviations versus rank of row means — meanSdPlot","title":"Plot row standard deviations versus rank of row means — meanSdPlot","text":"Diagnositic plot homoscedasticity across variables","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/meanSdPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot row standard deviations versus rank of row means — meanSdPlot","text":"","code":"meanSdPlot(x)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/meanSdPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot row standard deviations versus rank of row means — meanSdPlot","text":"x data matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/meanSdPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot row standard deviations versus rank of row means — meanSdPlot","text":"ggplot2 object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/meanSdPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot row standard deviations versus rank of row means — meanSdPlot","text":"Plot sd versus rank mean row like vsn::meanSdPlot.  Also show coefficient variation variances.  lower value indicates stronger variance stabilization","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/meanSdPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot row standard deviations versus rank of row means — meanSdPlot","text":"","code":"# set probability of each category prob <- runif(300)  # number of samples n_samples <- 1000  # number of counts nCounts <- 3000  # simulate counts from multinomial counts <- t(rmultinom(n_samples, size = nCounts, prob = prob)) colnames(counts) <- paste0(\"cat_\", 1:length(prob)) rownames(counts) <- paste0(\"sample_\", 1:n_samples)  # keep categories with at least 5 counts in at least 10 samples keep <- colSums(counts > 5) > 10  # run crumblr on counts cobj <- crumblr(counts[, keep], max.ratio = 10)  # Plot for CLR # For each sample, plot rank of mean vs sd fig1 <- meanSdPlot(cobj$E) + ggtitle(\"CLR\")  # run crumblr::standardize() df_std <- standardize(cobj)  # Standardized crumblr fig2 <- meanSdPlot(df_std) + ggtitle(\"Standardized crumblr\")  # Standardizing the crumblr results better stabilizes # the variances across variables fig1 | fig2"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotForest-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Forest plot — plotForest","title":"Forest plot — plotForest","text":"Forest plot Forest plot effect size estimates leaves tree","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotForest-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forest plot — plotForest","text":"","code":"plotForest(x, ...)  # S4 method for class 'treedata' plotForest(x, ..., hide = FALSE)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotForest-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forest plot — plotForest","text":"x result treeTest() ... arguments hide hide rownames legend","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotForest-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forest plot — plotForest","text":"ggplot2 object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotForest-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forest plot — plotForest","text":"","code":"library(variancePartition)  # Load cell counts, clustering and metadata # from Kang, et al. (2018) https://doi.org/10.1038/nbt.4042 data(IFNCellCounts)  # Apply crumblr transformation cobj <- crumblr(df_cellCounts)  # Use dream workflow to analyze each cell separately fit <- dream(cobj, ~ StimStatus + ind, info) fit <- eBayes(fit)  # Perform multivariate test across the hierarchy res <- treeTest(fit, cobj, hcl, coef = \"StimStatusstim\")  # Plot log fold changes from coef plotForest(res)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotScatterDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot with 2D density using viridis colors — plotScatterDensity","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"Scatter plot 2D density using viridis colors","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotScatterDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"","code":"plotScatterDensity(x, y, size = 1)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotScatterDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"x x-coordinates points plot y y-coordinates points plot size size point","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotScatterDensity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"ggplot2 object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotScatterDensity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot with 2D density using viridis colors — plotScatterDensity","text":"","code":"# simulate data M <- Rfast::rmvnorm(1000, mu = c(0, 0), sigma = diag(1, 2))  # create 2D density plot plotScatterDensity(M[, 1], M[, 2])"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot tree with results from multivariate testing — plotTreeTest","title":"Plot tree with results from multivariate testing — plotTreeTest","text":"Plot tree results multivariate testing","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot tree with results from multivariate testing — plotTreeTest","text":"","code":"plotTreeTest(   tree,   low = \"grey90\",   mid = \"red\",   high = \"darkred\",   xmax.scale = 1.5 )"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot tree with results from multivariate testing — plotTreeTest","text":"tree phylo object storing tree low low color gradient mid mid color gradient high high color gradient xmax.scale expand x-axis factor leaf labels fit plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot tree with results from multivariate testing — plotTreeTest","text":"ggplot2 object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot tree with results from multivariate testing — plotTreeTest","text":"","code":"library(variancePartition)  # Load cell counts, clustering and metadata # from Kang, et al. (2018) https://doi.org/10.1038/nbt.4042 data(IFNCellCounts)  # Apply crumblr transformation cobj <- crumblr(df_cellCounts)  # Use dream workflow to analyze each cell separately fit <- dream(cobj, ~ StimStatus + ind, info) fit <- eBayes(fit)  # Perform multivariate test across the hierarchy res <- treeTest(fit, cobj, hcl, coef = \"StimStatusstim\")  # Plot hierarchy and testing results plotTreeTest(res)   # Extract results for first 3 nodes res[1:3, ] #> # A tibble: 3 × 9 #>    node    beta     se  stat pvalue n_features lambda method          FDR #>   <int>   <dbl>  <dbl> <dbl>  <dbl>      <dbl>  <dbl> <chr>         <dbl> #> 1     1 -0.105  0.0348 -3.01 0.0137          1   0.01 FE.empirical 0.0513 #> 2     2 -0.105  0.0337 -3.12 0.0114          1   0.01 FE.empirical 0.0513 #> 3     3 -0.0784 0.0351 -2.23 0.0509          1   0.01 FE.empirical 0.109"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTestBeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot tree coefficients from multivariate testing — plotTreeTestBeta","title":"Plot tree coefficients from multivariate testing — plotTreeTestBeta","text":"Plot tree coefficients multivariate testing node.  applicable top fixed effect tests","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTestBeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot tree coefficients from multivariate testing — plotTreeTestBeta","text":"","code":"plotTreeTestBeta(   tree,   low = \"blue\",   mid = \"white\",   high = \"red\",   xmax.scale = 1.5 )"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTestBeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot tree coefficients from multivariate testing — plotTreeTestBeta","text":"tree phylo object storing tree low low color gradient mid mid color gradient high high color gradient xmax.scale expand x-axis factor leaf labels fit plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTestBeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot tree coefficients from multivariate testing — plotTreeTestBeta","text":"ggplot2 object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/plotTreeTestBeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot tree coefficients from multivariate testing — plotTreeTestBeta","text":"","code":"library(variancePartition)  # Load cell counts, clustering and metadata # from Kang, et al. (2018) https://doi.org/10.1038/nbt.4042 data(IFNCellCounts)  # Apply crumblr transformation cobj <- crumblr(df_cellCounts)  # Use dream workflow to analyze each cell separately fit <- dream(cobj, ~ StimStatus + ind, info) fit <- eBayes(fit)  # Perform multivariate test across the hierarchy res <- treeTest(fit, cobj, hcl, coef = \"StimStatusstim\")  # Plot hierarchy, no tests are significant plotTreeTestBeta(res)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/standardize-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize observations using precision weights — standardize","title":"Standardize observations using precision weights — standardize","text":"Compute standardized observations dividing observed values standard deviations based precision weights","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/standardize-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize observations using precision weights — standardize","text":"","code":"standardize(x, ...)  # S4 method for class 'EList' standardize(x, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/standardize-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize observations using precision weights — standardize","text":"x object storing data transformed ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/standardize-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize observations using precision weights — standardize","text":"matrix standardized values","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/standardize-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize observations using precision weights — standardize","text":"Weighted response standard deviation resulting values approximately equal sample variance. key property improves downstream PCA clustering analysis.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/standardize-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize observations using precision weights — standardize","text":"","code":"# set probability of each category prob <- c(0.1, 0.2, 0.3, 0.5)  # number of total counts countsTotal <- 300  # number of samples n_samples <- 100  # simulate counts from multinomial counts <- t(rmultinom(n_samples, size = countsTotal, prob = prob)) colnames(counts) <- paste0(\"cat_\", 1:length(prob)) rownames(counts) <- paste0(\"sample_\", 1:n_samples)  # run crumblr on counts cobj <- crumblr(counts)  # Standardize crumblr responses df_std <- standardize(cobj)  # Perform PCA on student transformed data pca <- prcomp(t(df_std)) df_pca <- as.data.frame(pca$x)  ggplot(df_pca, aes(PC1, PC2)) +   geom_point() +   theme_classic() +   theme(aspect.ratio = 1)"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/treeTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform multivariate testing along a hierarchy — treeTest","title":"Perform multivariate testing along a hierarchy — treeTest","text":"Perform multivariate testing using mvTest() along nodes tree","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/treeTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform multivariate testing along a hierarchy — treeTest","text":"","code":"treeTest(   fit,   obj,   hc,   coef,   method = c(\"FE.empirical\", \"FE\", \"RE2C\", \"tstat\", \"sidak\", \"fisher\"),   shrink.cov = TRUE )"},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/treeTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform multivariate testing along a hierarchy — treeTest","text":"fit MArrayLM object return lmFit() dream() obj EList object returned voom() hc hierarchical clustering hclust object coef name coefficient extracted method statistical method used perform multivariate test.  See details.  'FE' fixed effect test models covariance coefficients. 'FE.empirical' use compute empirical p-values sampling null distribution fitting gamma. 'RE2C' random effect test heterogeneity estimated coefficients models covariance coefficients, also incorporates fixed effects test . 'tstat' combines t-statistics models covariance coefficients. 'sidak' returns smallest p-value accounting number tests. 'fisher' combines p-value using Fisher's method assuming independent tests. shrink.cov shrink covariance matrix coefficients using Schafer-Strimmer method","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/treeTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform multivariate testing along a hierarchy — treeTest","text":"object type treedata storing results","code":""},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/treeTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform multivariate testing along a hierarchy — treeTest","text":"See package remaCor details remaCor::RE2C() test, see remaCor::LS() details fixed effect test.  1 feature selected, original t-statistic p-value returned.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/crumblr/reference/treeTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform multivariate testing along a hierarchy — treeTest","text":"","code":"library(variancePartition)  # Load cell counts, clustering and metadata # from Kang, et al. (2018) https://doi.org/10.1038/nbt.4042 data(IFNCellCounts)  # Apply crumblr transformation cobj <- crumblr(df_cellCounts)  # Use dream workflow to analyze each cell separately fit <- dream(cobj, ~ StimStatus + ind, info) fit <- eBayes(fit)  # Perform multivariate test across the hierarchy res <- treeTest(fit, cobj, hcl, coef = \"StimStatusstim\")  # Plot hierarchy and testing results plotTreeTest(res)   # Extract results for first 3 nodes res[1:3, ] #> # A tibble: 3 × 9 #>    node    beta     se  stat pvalue n_features lambda method          FDR #>   <int>   <dbl>  <dbl> <dbl>  <dbl>      <dbl>  <dbl> <chr>         <dbl> #> 1     1 -0.105  0.0348 -3.01 0.0137          1   0.01 FE.empirical 0.0513 #> 2     2 -0.105  0.0337 -3.12 0.0114          1   0.01 FE.empirical 0.0513 #> 3     3 -0.0784 0.0351 -2.23 0.0509          1   0.01 FE.empirical 0.109"}]
